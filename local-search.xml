<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/05/18/hello-world/"/>
    <url>/2023/05/18/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/05/11/%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81/"/>
    <url>/2023/05/11/%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81/</url>
    
    <content type="html"><![CDATA[<h1 id="防抖和节流"><a href="#防抖和节流" class="headerlink" title="防抖和节流"></a>防抖和节流</h1><p>防抖（debounce）:函数在一段时间内的多次调用，仅使得最后一次调用有效。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">debounce</span>(<span class="hljs-params">fn,t</span>)&#123;<br>  <span class="hljs-keyword">let</span> timer = <span class="hljs-literal">null</span>;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-built_in">clearTimeout</span>(timer);<br>     timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>   fn.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>,<span class="hljs-variable language_">arguments</span>)<br>&#125;,t)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>节流(throttle): 当事件触发后，指定时间内不能在触发</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">var</span> throttle = <span class="hljs-keyword">function</span> <span class="hljs-params">(fn, t)</span> &#123;<br>    let timer, arg<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">f</span><span class="hljs-params">(<span class="hljs-rest_arg">...args</span>)</span> &#123;<br>        arg = args<br>        <span class="hljs-keyword">if</span> (timer) <span class="hljs-keyword">return</span><br>        fn(...arg)<br>        arg = <span class="hljs-literal">null</span>;<br>        timer = setTimeout(() =&gt; &#123;<br>            timer = <span class="hljs-literal">null</span>;<br>            <span class="hljs-keyword">if</span> (arg) f(...arg)<br>        &#125;, t)<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>节流—王者荣耀释放技能 防抖—王者荣耀回城</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/05/03/vue3%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    <url>/2023/05/03/vue3%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="vue3学习总结"><a href="#vue3学习总结" class="headerlink" title="vue3学习总结"></a>vue3学习总结</h1><h2 id="组合式-API：setup"><a href="#组合式-API：setup" class="headerlink" title="组合式 API：setup()"></a>组合式 API：setup()</h2><p>vue3的 <code>setup()</code> 函数是组件中的一个新特性，用于替代Vue2中的<code>created()</code>和<code>mounted()</code>生命周期函数，并且提供了更加灵活的响应式数据绑定和逻辑复用。</p><p><code>setup()</code>函数接收两个参数，第一个参数为props对象，第二个参数为上下文对象。在<code>setup()</code>函数内部，可以通过返回一个对象来暴露组件中需要使用的响应式数据、计算属性、方法等。</p><p>在Vue3中，响应式数据的创建方式有所变化，需要使用<code>ref()</code>或<code>reactive()</code>函数进行创建。<code>ref()</code>用于创建基本数据类型的数据，而<code>reactive()</code>用于创建引用数据类型的数据。</p><h3 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h3><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">       <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">num1</span>  &#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">       <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;addClick&quot;</span>&gt;</span>加<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">       <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;num1--&quot;</span>&gt;</span>减<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> &#123; ref &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Ref</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> <span class="hljs-attr">num1</span>:<span class="hljs-title class_">Ref</span>&lt;number&gt; = <span class="hljs-title function_">ref</span>(<span class="hljs-number">0</span>)</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">//或 const num1 =  ref&lt;number&gt;(0)</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> <span class="hljs-title function_">addClick</span> = (<span class="hljs-params"></span>)=&gt;&#123;</span></span><br><span class="language-javascript"><span class="language-xml">    num1.<span class="hljs-property">value</span> += <span class="hljs-number">1</span>;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>1.template中ref会自动浅层解包，无须写.value</p><p>2.在setup中使用要.value</p><h3 id="reactive"><a href="#reactive" class="headerlink" title="reactive"></a>reactive</h3><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs pf"><span class="hljs-variable">&lt;template&gt;</span><br>    <span class="hljs-variable">&lt;div&gt;</span><br>       <span class="hljs-variable">&lt;span&gt;</span>&#123;&#123; <span class="hljs-keyword">state</span>.count &#125;&#125;&lt;/span&gt;<br>    &lt;/div&gt;<br>&lt;/template&gt;<br><br><span class="hljs-variable">&lt;script setup&gt;</span><br>import &#123; reactive &#125; <span class="hljs-keyword">from</span> &#x27;vue&#x27;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">state</span> = reactive(&#123;<br>  count: <span class="hljs-number">0</span>,<br>&#125;);<br><span class="hljs-keyword">const</span> addCount = ()=&gt;&#123;<br>  <span class="hljs-keyword">state</span>.count++<br>&#125;<br><br>&lt;/script&gt;<br><br><span class="hljs-variable">&lt;style scoped&gt;</span><br><br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><p>当需要对一个 “reactive” 对象的某个属性进行赋值操作时，直接对这个属性进行赋值即可。因为这个对象本身就是响应式的，无需使用 “.value” 属性。</p><h3 id="reactive使用注意点"><a href="#reactive使用注意点" class="headerlink" title="reactive使用注意点"></a>reactive使用注意点</h3><ol><li><p>reactive只使用于对象类型，如对象，数组，集合，不适用于原始类型</p></li><li><p>从reactive返回的代理对象与原始对象是不一样的。用<code>===</code>操作符进行比较会返回<code>false</code>，所以必须保持对响应式对象的相同引用，不能解构成局部变量。可以使用toRefs将对象的所有属性转换为响应式的然后再解构才不会失去响应式。</p></li><li><p>不重新赋值reactive对象，重新替换一个响应式对象。新的对象会覆盖，响应式连接会丢失。</p></li><li><p>传递reactive对象中的属性到函数中，响应式连接也会丢失。</p><p>​</p></li></ol><h2 id="props"><a href="#props" class="headerlink" title="props"></a>props</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">const</span> props = <span class="hljs-title function_">defineProps</span>([<span class="hljs-string">&#x27;foo&#x27;</span>])</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(props.<span class="hljs-property">foo</span>)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">&lt;MyComponent foo<span class="hljs-operator">=</span><span class="hljs-string">&quot;hello&quot;</span> /&gt;<br></code></pre></td></tr></table></figure><p>1.props 使用defineProps()</p><p>2.当一个prop名字很长是，使用camelCase形式,例如:</p><p>3.vue是单向数据流的，props的随父组件的更新而变化，不应该在子组件修复props</p><h2 id="触发与监听事件"><a href="#触发与监听事件" class="headerlink" title="触发与监听事件"></a>触发与监听事件</h2><p>使用defineEmits()生命触发事件</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/04/29/%E5%A6%82%E4%BD%95%E5%86%99%E5%A5%BD%E4%B8%80%E4%BB%BD%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2/"/>
    <url>/2023/04/29/%E5%A6%82%E4%BD%95%E5%86%99%E5%A5%BD%E4%B8%80%E4%BB%BD%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="如何写好一份技术博客"><a href="#如何写好一份技术博客" class="headerlink" title="如何写好一份技术博客"></a>如何写好一份技术博客</h1><h3 id="这个答案由四部分组成"><a href="#这个答案由四部分组成" class="headerlink" title="这个答案由四部分组成"></a>这个答案由四部分组成</h3><ul><li>博客的流量来源</li><li>不同文章类型的写作要点</li><li>如何写博客</li><li>如何收集写作的灵感</li></ul><h3 id="技术博客类型"><a href="#技术博客类型" class="headerlink" title="技术博客类型"></a>技术博客类型</h3><ul><li>技术细节型</li><li>干货型</li><li>实践总结型</li><li>杂谈与鸡汤型</li></ul><p><img src="https://pica.zhimg.com/d10e850c549258a3a2d8f7025d25f95f_r.jpg?source=1940ef5c"></p><h4 id="技术细节型"><a href="#技术细节型" class="headerlink" title="技术细节型"></a>技术细节型</h4><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">这种类型主要来自于日常工作，如某个第三库更新，某个浏览器bug，如何使用某个技术。因此，我们就会用这样的关键字和词去搜索。</span><br><span class="hljs-attribute"></span><br><span class="hljs-attribute">标题的前半部分是关键字，后半部分指名意图。</span><br><span class="hljs-attribute"></span><br><span class="hljs-attribute">如</span><span class="hljs-punctuation">:</span> <span class="hljs-string">Mac OS Laravel 安装</span><br><br><span class="hljs-attribute">需要注意几点</span><span class="hljs-punctuation">:</span><br><span class="hljs-punctuation"></span><br><span class="hljs-bullet">-</span> <span class="hljs-string">表达一些技术上的细节</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">以学习的角度去想</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">加入一点点自己的情感</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">编写更简洁的内容</span><br></code></pre></td></tr></table></figure><h4 id="干货型"><a href="#干货型" class="headerlink" title="干货型"></a>干货型</h4><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">一般来说，这种类型的文章更类似于GitHub上的那些Awesome类型的Repo。说说几个标题，大概可能就会有点感觉了:</span><br>每个程序员必知之SEO<br>作为一个前端工程师你了解你的小伙伴么 - chrome<br>App 上架相关事宜、解决技巧<br></code></pre></td></tr></table></figure><h4 id="实践总结型"><a href="#实践总结型" class="headerlink" title="实践总结型"></a>实践总结型</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><h4 id="杂谈与鸡汤型"><a href="#杂谈与鸡汤型" class="headerlink" title="杂谈与鸡汤型"></a>杂谈与鸡汤型</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><h3 id="如何写博客"><a href="#如何写博客" class="headerlink" title="如何写博客"></a>如何写博客</h3><p>对于博客的内容来说，下面几点很重要哦：</p><ul><li><p>标题、小标题。一个好的标题会带来更多的流量的。</p></li><li><p>内容。以代码为例的文章，最好有代码。代码可以放在GitHub上，一举两得。</p></li><li><p>图 —— 一图胜千言，如本文第一节中的框架图。，一个框架图可以省去你的很多话语。</p></li><li><p>排版，又可称为UI设计。基本的语法高亮要有，容易阅读也要有。最简单就是白底黑字。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">标题——必须重要，类名<br></code></pre></td></tr></table></figure><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs oxygene">小标题——地图，<span class="hljs-keyword">method</span>,他就是站点地图，一点就到了相应的地方。<br></code></pre></td></tr></table></figure><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">内容——函数体,你写得越复杂，别人看的时间就越久，通俗易懂，就是一个很好的开始。<br><br>编写内容的时候需要注意下面的几点：<br><br>代码。必要的时候贴出代码<br>列表。列表可以简明扼要的说明你想要表达的内容。<br>图表。一张流程图可以说明程序的步骤，一个表格可以作好一个对比。<br>标题。标题的好处，可以让用户快速定位,让用户找到想要的内容。<br>链接。一个好的<span class="hljs-built_in">URL</span>对于使用英文的人来说，可以利于SEO,对于中文，使用的人可以判断出文章的专业与否。<br></code></pre></td></tr></table></figure></li></ul><h3 id="如何收集写作的灵感"><a href="#如何收集写作的灵感" class="headerlink" title="如何收集写作的灵感"></a>如何收集写作的灵感</h3><p>一般是先有个论点，然后再论据，最后才写。</p><h1 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h1><h3 id="确定纲要"><a href="#确定纲要" class="headerlink" title="确定纲要"></a>确定纲要</h3><p><img src="https://pic1.zhimg.com/80/v2-21d3e223708a307648692756c61f2bcc_720w.webp?source=1940ef5c"></p><p><img src="https://pic1.zhimg.com/80/v2-e0b0051f766e361536ca0ecf06762d33_720w.webp?source=1940ef5c"></p><p><img src="https://picx.zhimg.com/80/v2-deacf67ac52f18ee845369ba970fa3a6_720w.webp?source=1940ef5c"></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
