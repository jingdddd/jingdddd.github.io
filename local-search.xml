<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>事件委托 </title>
    <link href="/2023/07/21/%E4%BA%8B%E4%BB%B6%E5%A7%94%E6%89%98/"/>
    <url>/2023/07/21/%E4%BA%8B%E4%BB%B6%E5%A7%94%E6%89%98/</url>
    
    <content type="html"><![CDATA[<h1 id="什么是事件委托"><a href="#什么是事件委托" class="headerlink" title="什么是事件委托"></a>什么是事件委托</h1><p>通俗的讲，事件委托是把一个元素响应事件（click,keydown…）的函数委托给别的元素，他是利用事件冒泡原理的技术。它允许我们将事件处理程序绑定在父元素上，然后通过事件冒泡的方式在子元素上触发。这样可以减少事件处理程序的数量，提高性能和代码的简洁性。</p><p>下面是一个使用事件委托是示例，假设我们有一个父元素包含了多个子元素，我们希望对这些子元素中的点击事件进行处理:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;parent&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>按钮1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>按钮2<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>按钮3<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>如果给每个列表项一一都绑定一个函数，那对于内存消耗是非常大的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> btn = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByTagName</span>(<span class="hljs-string">&#x27;button&#x27;</span>)<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>; i &lt; btn.<span class="hljs-property">length</span>; i++)&#123;<br>    btn[i].<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e.<span class="hljs-property">target</span>.<span class="hljs-property">innerHTML</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这时我们可以使用事件委托，通过<code>addEventListener</code>方法将点击事件绑定在父元素上。在事件处理函数中，通过<code>event.target</code>来获取触发事件的具体元素，然后判断是否为按钮元素，如果是则执行相应的处理逻辑。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> parent = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;parent&#x27;</span>);<br><br>parent.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>) &#123;<br>  <span class="hljs-keyword">if</span> (event.<span class="hljs-property">target</span>.<span class="hljs-property">tagName</span> === <span class="hljs-string">&#x27;BUTTON&#x27;</span>) &#123;<br>    <span class="hljs-comment">// 在这里处理按钮点击事件</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;按钮被点击了&#x27;</span>);<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h1 id="JavaScript事件流"><a href="#JavaScript事件流" class="headerlink" title="JavaScript事件流"></a>JavaScript事件流</h1><p>JavaScript事件流是指事件执行的完整路径，它涉及三个阶段：事件捕获阶段、目标阶段和事件冒泡阶段。</p><p>事件捕获阶段</p><ul><li>事件从最外层的祖先元素（通常是window或document对象）开始，逐级向下传播。</li><li>在这个阶段，事件会经过DOM树中的每个祖先元素，直到达到事件的目标元素。</li><li>在事件捕获阶段，可以使用<code>addEventListener</code>方法的第三个参数为元素绑定事件监听，该参数设置为<code>true</code>。</li></ul><p>目标阶段</p><ul><li>事件到达目标元素，即事件的触发元素。</li><li>在这个阶段，事件会在目标元素上触发执行相应的事件处理程序。</li></ul><p>事件冒泡阶段</p><ul><li>事件从目标元素开始，向上冒泡传播。</li><li>在这个阶段，事件会经过目标元素的父元素、更高级别的祖先元素，直到达到文档根元素（通常是window或document对象）。</li><li>在事件冒泡阶段，可以使用<code>addEventListener</code>方法的第三个参数为元素绑定事件监听，该参数设置为<code>false</code>（默认值）或省略。</li></ul><h1 id="事件冒泡引发的问题"><a href="#事件冒泡引发的问题" class="headerlink" title="事件冒泡引发的问题"></a>事件冒泡引发的问题</h1><p>事件冒泡会引发意料之外的问题。本来只想触发<span>元素的 click 事件，然而<div>元素和<body>元素的 click 事件也同时被触发了。因此，有必要对事件的作用范围进行限制。</p><p>event.stopPropagation:这是阻止事件的冒泡方法，不止事件向document上蔓延，但是默认事件任然会执行，当你调用这个方法的时候，如果点击一个连接，这个连接仍然会被打开</p><p>event.preventDefault:这是阻止默认事件的方法，调用此方法时，链接不会被打开，但是会发生冒泡，冒泡会传递到上一层的父元素</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>数据类型判断 </title>
    <link href="/2023/07/17/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%88%A4%E6%96%AD/"/>
    <url>/2023/07/17/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%88%A4%E6%96%AD/</url>
    
    <content type="html"><![CDATA[<h1 id="数据类型判断"><a href="#数据类型判断" class="headerlink" title="数据类型判断"></a>数据类型判断</h1><p>类型判断在 web 开发中有非常广泛的应用：</p><ol><li>判断数字还是字符串；</li><li>判断数组还是对象；</li><li>判断日期、正则、错误类型；</li><li>判断 plainObject、空对象、Window 对象；</li></ol><h1 id="1-typeof"><a href="#1-typeof" class="headerlink" title="1.typeof"></a>1.typeof</h1><p>es6前有六种数据类型，分别是Undefind,Null,String,Boolean,Number,Object,使用typeof判断分别返回undefind,object,string,boolean,number,object。其中typeof判断null返回object。</p><p>typeof在谷歌浏览器中判断函数返回function, 判断 Array、Date、RegExp、Error等返回object。因此typeof细分不了引用类型。</p><h2 id="2-Object-prototype-toString"><a href="#2-Object-prototype-toString" class="headerlink" title="2. Object.prototype.toString"></a>2. Object.prototype.toString</h2><p>当 toString 方法被调用的时候，下面的步骤会被执行,如果 this 值是 undefined，就返回 [object Undefined],如果 this 的值是 null，就返回 [object Null],</p><p>让 O 成为 ToObject(this) 的结果</p><p>让 class 成为 O 的内部属性 [[Class]] 的值</p><p>让 O 成为 ToObject(this) 的结果<br>让 class 成为 O 的内部属性 [[Class]] 的值<br>最后返回由 “[object “ 和 class 和 “]” 三个部分组成的字符串</p><p>比如:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">call</span>(<span class="hljs-literal">null</span>) <span class="hljs-comment">//[object Null]</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">call</span>(<span class="hljs-literal">undefined</span>) <span class="hljs-comment">//[object Undefined]</span><br><span class="hljs-keyword">var</span> date = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br><span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">call</span>(date) <span class="hljs-comment">//[object Date]</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">call</span>(<span class="hljs-title class_">Math</span>)); <span class="hljs-comment">// [object Math]</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">call</span>(<span class="hljs-title class_">JSON</span>)); <span class="hljs-comment">// [object JSON]</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">a</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">arguments</span>)); <span class="hljs-comment">// [object Arguments]</span><br>&#125;<br><span class="hljs-title function_">a</span>();<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>设计模式</title>
    <link href="/2023/07/17/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <url>/2023/07/17/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="什么是设计模式"><a href="#什么是设计模式" class="headerlink" title="什么是设计模式"></a>什么是设计模式</h1><p>设计模式是软件设计中典型问题的解决方案。它们就像能根据需求进行调整的预制蓝图， 可用于解决代码中反复出现的设计问题。</p><h1 id="设计模式六大原则-SOLID"><a href="#设计模式六大原则-SOLID" class="headerlink" title="设计模式六大原则(SOLID)"></a>设计模式六大原则(SOLID)</h1><h2 id="1-单一职责原则"><a href="#1-单一职责原则" class="headerlink" title="1.单一职责原则"></a>1.单一职责原则</h2><p>一个类应该只有一个引起他变化的原因</p><h2 id="2-开闭原则"><a href="#2-开闭原则" class="headerlink" title="2.开闭原则"></a>2.开闭原则</h2><p>对扩展开放，对修改关闭</p><h2 id="3-里氏替换原则"><a href="#3-里氏替换原则" class="headerlink" title="3.里氏替换原则"></a>3.里氏替换原则</h2><p>主要阐述继承的原则:</p><p>子类可以实现父类的抽象方法，但不能覆盖父类的非抽象方法<br>子类中可以增加自己特有的方法<br>当子类的方法重载父类的方法时，方法的前置条件（即方法的输入参数）要比父类的方法更宽松<br>当子类的方法实现父类的方法时（重写&#x2F;重载或实现抽象方法），方法的后置条件（即方法的的输出&#x2F;返回值）要比父类的方法更严格或相等</p><h2 id="4-迪米特法则"><a href="#4-迪米特法则" class="headerlink" title="4.迪米特法则"></a>4.迪米特法则</h2><p>又叫作最少知识原则,只与你的直接朋友交流不和陌生人说话,两个软件实体无须直接通信，那么就不应当发生直接的相互调用，可以通过第三方转发该调用。其目的是降低类之间的耦合度，提高模块的相对独立性。</p><h2 id="5-接口隔离原则"><a href="#5-接口隔离原则" class="headerlink" title="5.接口隔离原则"></a>5.接口隔离原则</h2><p>将臃肿庞大的接口拆分成更小更具体的接口</p><h2 id="6-依赖倒置原则"><a href="#6-依赖倒置原则" class="headerlink" title="6.依赖倒置原则"></a>6.依赖倒置原则</h2><p>每个类尽量提供接口或抽象类，或者两者都具备。</p><p>变量的声明类型尽量是接口或者是抽象类。</p><p>任何类都不应该从具体类派生。</p><p>使用继承时尽量遵循里氏替换原则。</p><h2 id="创建者模式"><a href="#创建者模式" class="headerlink" title="创建者模式"></a>创建者模式</h2><h3 id="1-单例模式"><a href="#1-单例模式" class="headerlink" title="1.单例模式"></a>1.单例模式</h3><p>一个类只有一个实例，并提供一个全局访问的方法。</p><p>主要实现是这样实现的 :在类中判断是否有这个实例，如果有就直接返回，如果没有就先实例化在返回。<br>vuex和redux就是使用单例模式实现的<br>优点：<br>1.一个代码只有一个实例<br>2.可以获得指向该实例的全局方法<br>3.仅在首次请求单例模式时进行初始化</p><p>缺点:<br>1.违法了单一职责原则，同时执行了两个问题<br>2单例模式可能掩盖不良设计， 比如程序各组件之间相互了解过多等。<br>3该模式在多线程环境下需要进行特殊处理， 避免多个线程多次创建单例对象。<br>4单例的客户端代码单元测试可能会比较困难， 因为许多测试框架以基于继承的方式创建模拟对象。 由于单例类的构造函数是私有的， 而且绝大部分语言无法重写静态方法<br>5出仔细考虑模拟单例的方法。 要么干脆不编写测试代码， 或者不使用单例模式。</p><h3 id="2-工厂模式"><a href="#2-工厂模式" class="headerlink" title="2.工厂模式"></a>2.工厂模式</h3><p>在父类中实现一个创建对象的方法，由子类来决定实例化对象的类型</p><p>优点:<br>1.可以避免创建者与具体产品直接的紧密耦合<br>2.单一职责原则, 可以将产品的创建代码放在单一位置，使得代码更加容易维护<br>3.开闭原则,无须修改客户端代码，你就可以在产品中引入新的类型</p><p>缺点<br>工厂模式会引入许多子类，会使得代码变得非常复杂</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>浏览器事件模型</title>
    <link href="/2023/07/17/%E6%B5%8F%E8%A7%88%E5%99%A8%E4%BA%8B%E4%BB%B6%E6%A8%A1%E5%9E%8B&amp;%E8%AF%B7%E6%B1%82/"/>
    <url>/2023/07/17/%E6%B5%8F%E8%A7%88%E5%99%A8%E4%BA%8B%E4%BB%B6%E6%A8%A1%E5%9E%8B&amp;%E8%AF%B7%E6%B1%82/</url>
    
    <content type="html"><![CDATA[<h1 id="1-浏览器事件模型"><a href="#1-浏览器事件模型" class="headerlink" title="1. 浏览器事件模型"></a>1. 浏览器事件模型</h1><h2 id="1-1-DOM事件"><a href="#1-1-DOM事件" class="headerlink" title="1.1. DOM事件"></a>1.1. DOM事件</h2><p>DOM<code>(Document Object Model</code>，文档对象模型)是针对HTML文档和XML文档的一个API。DOM描绘了一个层次化的节点树，允许开发人员添加、移出和修改页面的某一部分，DOM 脱胎于Netscape 及微软公司创始的 DHTML（动态HTML）。但现在它已经成为表现和操作页面标记的真正跨平台、语言中立的方式。<br><code>Netscape Navigator 4</code> 和 <code>IE4</code> 分别发布于 1997 年的 6 月和 10 月发布的 DHTML，由于 <code>IE4</code> 和 <code>Netscape Navigator4</code> 分别支持不同的 DHTML，为了统一标准，W3C开始制定 DOM。1998 年10 月 W3C 总结了 IE 和 Navigator4 的规范，制定了 DOMLevel 1即 DOM1，之前 IE 与 Netscape 的规范则被称为 DOMLevel 0 即 DOM0 。</p><h3 id="1-1-1-DOM0级事件"><a href="#1-1-1-DOM0级事件" class="headerlink" title="1.1.1. DOM0级事件"></a>1.1.1. DOM0级事件</h3><p>假设页面中存在一个 btn 的按钮，并且给 btn 添加一个点击事件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">btn.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;this is a click event&#x27;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>事件就是用户或浏览器自身执行的某种操作，如click、load、mouseover等，都是事件的名字，而响应某个事件的函数就被称为事件处理程序。</p><h4 id="1-1-1-1-click事件过程"><a href="#1-1-1-1-click事件过程" class="headerlink" title="1.1.1.1. click事件过程"></a>1.1.1.1. click事件过程</h4><p>在上述的例子中，click 事件并没有像其他函数一样，必须要调用才可以执行，click 事件并不确定什么时候发生，而当浏览器发现用户点击该按钮时，浏览器就检测<code>btn.onclick</code>是否有值，如果有，就会执行<code>btn.onclick.call(btn,event)</code>，此时函数执行，call() 方法接收两个参数，第一个指向调用当前方法的对象，也就是this。<br>需要注意的是，指定的 this 值并不一定是该函数执行时真正的this值，如果这个函数处于<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Strict_mode">非严格模式</a>下，则指定为 null 和 undefined 的 this 值会自动指向全局对象(浏览器中就是window对象)，同时值为原始值(数字，字符串，布尔值)的 this 会指向该原始值的自动包装对象。<br>另一个参数则是事件对象 event，该对象也可以通过 arguments[0] 来访问，它包含了事件相关的所有信息，如本例子中，则包含了点击事件的全部信息。可以通过给函数传参来获取事件信息。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">btn.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)&#123;<br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;this is a click event&#x27;</span>);<br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e);  <span class="hljs-comment">//  事件对象</span><br>    <br>&#125;<br></code></pre></td></tr></table></figure><p>但是在 IE 中，在使用 DOM0 级方法添加事件处理程序时，event 是作 window 对象的一个属性而存在的。此时访问事件对象需要通过 <code>window.event</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">btn.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">window</span>.<span class="hljs-property">event</span>);  <span class="hljs-comment">//  IE中事件对象    </span><br>&#125;<br></code></pre></td></tr></table></figure><p>在 DOM0级中，如果想要实现一个对象绑定多个函数，可以这样实现：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn1</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-comment">// do something</span><br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn2</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-comment">// do something</span><br>&#125;<br>btn.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)&#123;<br>  fn1.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">xxx</span>);<br>  fn2.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">yyy</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-1-2-DOM1级事件"><a href="#1-1-2-DOM1级事件" class="headerlink" title="1.1.2. DOM1级事件"></a>1.1.2. DOM1级事件</h3><p>DOM级别1于1998年10月1日成为W3C推荐标准。1级DOM标准中并没有定义事件相关的内容，所以没有所谓的1级DOM事件模型。在2级DOM中除了定义了一些DOM相关的操作之外还定义了一个事件模型 ，这个标准下的事件模型就是我们所说的2级DOM事件模型。</p><h3 id="1-1-3-DOM2级事件"><a href="#1-1-3-DOM2级事件" class="headerlink" title="1.1.3. DOM2级事件"></a>1.1.3. DOM2级事件</h3><p>W3C 后来将 DOM1 升级为 DOM2，DOM2级规范开始尝试以一种符合逻辑的方式来标准化 DOM事件。DOM0级 可以认为 onclick 是 btn 的一个属性，DOM2级 则将属性升级为队列。<br>DOM2级 事件定义了两个方法，用于处理指定和删除事件处理程序的操作，<code>addEventListener()</code>和<code>removeEventListener()</code>，所有的 DOM 节点中都包含这两个方法，它们都接收 3 个参数。</p><ol><li>要处理的事件名；</li><li>作为事件处理程序的函数；</li><li>布尔值，true 代表在捕获阶段调用事件处理程序，false 表示在冒泡阶段调用事件处理程序，默认为 false；<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript">btn.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-comment">//  do something</span><br>&#125;)<br>btn.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-comment">//  do something else</span><br>&#125;)<br></code></pre></td></tr></table></figure><code>addEventListener()</code>将事件加入到监听队列中，当浏览器发现用户点击按钮时，click 队列中依次执行匿名函数1、匿名函数2。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn1</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-comment">//  do something</span><br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn1</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-comment">//  do something else</span><br>&#125;<br>btn.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>,fn1)<br>btn.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>,fn2)<br></code></pre></td></tr></table></figure>如果这样写，click 队列中依次<code>fn1.call(btn,event)</code>，<code>fn2.call(btn,event)</code>。<br>通过<code>addEventListener()</code>添加的事件只能由<code>removeEventListener()</code>来移除，并且<code>removeEventListener()</code>只能移除具名函数，不能移除匿名函数。<blockquote><p>课后作业：必须通读<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document_Object_Model">MDN</a>上关于DOM的内容；</p></blockquote></li></ol><h3 id="1-1-4-IE-中-DOM2级事件"><a href="#1-1-4-IE-中-DOM2级事件" class="headerlink" title="1.1.4. IE 中 DOM2级事件"></a>1.1.4. IE 中 DOM2级事件</h3><p>IE8 及之前，实现类似<code>addEventListener()</code>和<code>removeEventListener()</code>的两个方法是<code>attachEvent()</code>和<code>detachEvent()</code>，这两个方法接受相同的两个参数。</p><ol><li>要处理的事件名；</li><li>作为事件处理程序的函数；</li></ol><p>IE8 之前的只支持事件冒泡，所以通过<code>attachEvent()</code>添加的事件处理程序只能添加到冒泡阶段。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">btn.<span class="hljs-title function_">attachEvent</span>(<span class="hljs-string">&#x27;click&#x27;</span>,fn1)<br>btn.<span class="hljs-title function_">attachEvent</span>(<span class="hljs-string">&#x27;click&#x27;</span>,fn2)<br></code></pre></td></tr></table></figure><p>当用户点击时，click 队列依次<code>fn1.call(undefined,undefined)</code>，<code>fn2.call(undefined,undefined)</code>。<br>类似的<code>detachEvent()</code>也只能移除具名函数，不能移除匿名函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">eventHandler</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;xianzao);</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">btn.attachEvent(&#x27;</span>onClick<span class="hljs-string">&#x27;, eventHandler);</span><br><span class="hljs-string">btn.detachEvent(&#x27;</span>onClick, eventHandler);<br></code></pre></td></tr></table></figure><h3 id="1-1-5-兼容处理"><a href="#1-1-5-兼容处理" class="headerlink" title="1.1.5. 兼容处理"></a>1.1.5. 兼容处理</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">if</span>(<span class="hljs-keyword">typeof</span> btn.<span class="hljs-property">addEventListener</span> === <span class="hljs-string">&#x27;function&#x27;</span>)&#123;<br>  btn.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>,fn);<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-keyword">typeof</span> btn.<span class="hljs-property">attachEvent</span> === <span class="hljs-string">&#x27;function&#x27;</span>)&#123;<br>  btn.<span class="hljs-title function_">attachEvent</span>(<span class="hljs-string">&#x27;onclick&#x27;</span>,fn)<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>  btn.<span class="hljs-property">onclick</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-comment">// do something</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-1-6-总结"><a href="#1-1-6-总结" class="headerlink" title="1.1.6. 总结"></a>1.1.6. 总结</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> btn = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;btn&#x27;</span>);<br><br>btn.<span class="hljs-property">onClick</span> = <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;我是DOM0级事件处理程序&#x27;</span>);<br>&#125;<br>btn.<span class="hljs-property">onClick</span> = <span class="hljs-literal">null</span>;<br><br>btn.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;我是DOM2级事件处理程序&#x27;</span>);<br>&#125;, <span class="hljs-literal">false</span>);<br>btn.<span class="hljs-title function_">removeEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, handler, <span class="hljs-literal">false</span>)<br><br>btn.<span class="hljs-title function_">attachEvent</span>(<span class="hljs-string">&#x27;onclick&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;我是IE事件处理程序&#x27;</span>)<br>&#125;)<br>btn.<span class="hljs-title function_">detachEvent</span>(<span class="hljs-string">&#x27;onclicn&#x27;</span>, handler);<br></code></pre></td></tr></table></figure><ol><li>DOM2级的好处是可以添加多个事件处理程序；DOM0对每个事件只支持一个事件处理程序；</li><li>通过DOM2添加的匿名函数无法移除，上面写的例子就移除不了，<code>addEventListener</code>和<code>removeEventListener</code>的handler必须同名；</li><li>作用域：DOM0的handler会在所属元素的作用域内运行，IE的handler会在全局作用域运行，<code>this === window</code>；</li><li>触发顺序：添加多个事件时，DOM2会按照添加顺序执行，IE会以相反的顺序执行；</li><li>跨浏览器的事件处理程序<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> <span class="hljs-title class_">EventUtil</span> = &#123;<br>  <span class="hljs-comment">// element是当前元素，可以通过getElementById(id)获取</span><br>  <span class="hljs-comment">// type 是事件类型，一般是click ,也有可能是鼠标、焦点、滚轮事件等等</span><br>  <span class="hljs-comment">// handle 事件处理函数</span><br>  <span class="hljs-attr">addHandler</span>: <span class="hljs-function">(<span class="hljs-params">element, type, handler</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// 先检测是否存在DOM2级方法,再检测IE的方法，最后是DOM0级方法（一般不会到这）</span><br>    <span class="hljs-keyword">if</span> (element.<span class="hljs-property">addEventListener</span>) &#123;<br>      <span class="hljs-comment">// 第三个参数false表示冒泡阶段</span><br>      element.<span class="hljs-title function_">addEventListener</span>(type, handler, <span class="hljs-literal">false</span>);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (element.<span class="hljs-property">attachEvent</span>) &#123;<br>      element.<span class="hljs-title function_">attachEvent</span>(<span class="hljs-string">`on<span class="hljs-subst">$&#123;type&#125;</span>`</span>, handler)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      element[<span class="hljs-string">`on<span class="hljs-subst">$&#123;type&#125;</span>`</span>] = handler;<br>    &#125;<br>  &#125;,<br><br>  <span class="hljs-attr">removeHandler</span>: <span class="hljs-function">(<span class="hljs-params">element, type, handler</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (element.<span class="hljs-property">removeEventListener</span>) &#123;<br>      <span class="hljs-comment">// 第三个参数false表示冒泡阶段</span><br>      element.<span class="hljs-title function_">removeEventListener</span>(type, handler, <span class="hljs-literal">false</span>);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (element.<span class="hljs-property">detachEvent</span>) &#123;<br>      element.<span class="hljs-title function_">detachEvent</span>(<span class="hljs-string">`on<span class="hljs-subst">$&#123;type&#125;</span>`</span>, handler)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      element[<span class="hljs-string">`on<span class="hljs-subst">$&#123;type&#125;</span>`</span>] = <span class="hljs-literal">null</span>;<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 获取元素</span><br><span class="hljs-keyword">var</span> btn = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;btn&#x27;</span>);<br><span class="hljs-comment">// 定义handler</span><br><span class="hljs-keyword">var</span> handler = <span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;我被点击了&#x27;</span>);<br>&#125;<br><span class="hljs-comment">// 监听事件</span><br><span class="hljs-title class_">EventUtil</span>.<span class="hljs-title function_">addHandler</span>(btn, <span class="hljs-string">&#x27;click&#x27;</span>, handler);<br><span class="hljs-comment">// 移除事件监听</span><br><span class="hljs-comment">// EventUtil.removeHandler(button1, &#x27;click&#x27;, clickEvent);</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="1-2-事件捕获-amp-事件冒泡"><a href="#1-2-事件捕获-amp-事件冒泡" class="headerlink" title="1.2. 事件捕获&amp;事件冒泡"></a>1.2. 事件捕获&amp;事件冒泡</h2><p>事件流描述的是从页面中接收事件的顺序<br>IE 的事件流是事件冒泡流<br>而 <code>Netscape Communicator</code> 的事件流是事件捕获流<br>DOM2级事件规定的事件流包括三个阶段：</p><ul><li>事件捕获阶段；</li><li>处于目标阶段；</li><li>事件冒泡阶段；</li></ul><p>首先发生的是事件捕获，为截获事件提供了机会。<br>然后是实际的目标接收到事件。<br>最后一个阶段是冒泡阶段，可以在这个阶段对事件做出响应<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2340337/1671033844027-574f28ec-feaa-47d5-9d06-cce699bd2bc2.png#averageHue=%23eeeeed&clientId=uadbfb728-c9f3-4&from=drop&id=uf0cc6ef4&originHeight=384&originWidth=684&originalType=binary&ratio=1&rotation=0&showTitle=false&size=76672&status=done&style=none&taskId=uf9318c84-6071-4f59-b387-80ae5e62cc5&title=" alt="38007715-4cc457d0-327d-11e8-9fb3-667fa75fc38c.png"><br>1、当处于目标阶段，没有捕获与冒泡之分，执行顺序会按照<code>addEventListener</code>的添加顺序决定，先添加先执行；<br>2、使用<code>stopPropagation()</code>取消事件传播时，事件不会被传播给下一个节点，但是，同一节点上的其他listener还是会被执行；如果想要同一层级的listener也不执行，可以使用<code>stopImmediatePropagation()</code>；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// list 的捕获</span><br>$list.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;list capturing&#x27;</span>);<br>  e.<span class="hljs-title function_">stopPropagation</span>();<br>&#125;, <span class="hljs-literal">true</span>)<br>  <br><span class="hljs-comment">// list 捕获 2</span><br>$list.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;list capturing2&#x27;</span>);<br>&#125;, <span class="hljs-literal">true</span>)<br><br><span class="hljs-comment">// list capturing</span><br><span class="hljs-comment">// list capturing2</span><br></code></pre></td></tr></table></figure><p>3、<code>preventDefault()</code>只是阻止默认行为，跟JS的事件传播一点关系都没有；<br>4、一旦发起了<code>preventDefault()</code>，在之后传递下去的事件里面也会有效果；</p><h3 id="1-2-1-测试"><a href="#1-2-1-测试" class="headerlink" title="1.2.1. 测试"></a>1.2.1. 测试</h3><p>如果有以下例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;!<span class="hljs-variable constant_">DOCTYPE</span> html&gt; <br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span> </span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span> </span><br><span class="language-xml"> <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Event Bubbling Example<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span> </span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span> </span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span> </span><br><span class="language-xml"> <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;myDiv&quot;</span>&gt;</span>Click Me<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> </span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span> </span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure><ol><li>事件捕获</li></ol><p>最不具体的节点最先收到事件，而最具体的节点最后收到事件。事件捕获实际上是为了在事件到达最终目标<br>前拦截事件。<br>如果前面的例子使用事件捕获，则点击<div>元素会以下列顺序触发 click 事件：</p><ul><li>document； </li><li><html>；</li><li><body>；</li><li><div>；</li></ul><ol><li>事件冒泡</li></ol><p>在点击页面中的<div>元素后，click 事件会以如下顺序发生：</p><ul><li><div>；</li><li><body>；</li><li><html>；</li><li>document；</li></ul><div>元素，即被点击的元素，最先触发 click 事件。然后，click 事件沿 DOM 树一路向上，在经过的每个节点上依次触发，直至到达 `document` 对象。## 1.3. 事件对象DOM0和DOM2的事件处理程序都会自动传入event对象IE中的event对象取决于指定的事件处理程序的方法。IE的handler会在全局作用域运行，`this === window`，所以在IE中会有`window.event`、`event`两种情况，只有在事件处理程序期间，event对象才会存在，一旦事件处理程序执行完成，event对象就会被销毁event对象里需要关心的两个属性：<ol><li>target：target永远是被添加了事件的那个元素；</li><li>eventPhase：调用事件处理程序的阶段，有三个值<br>1：捕获阶段；<br>2：处于目标；<br>3：冒泡阶段；</li></ol><h3 id="1-3-1-preventDefault与stopPropagation"><a href="#1-3-1-preventDefault与stopPropagation" class="headerlink" title="1.3.1. preventDefault与stopPropagation"></a>1.3.1. preventDefault与stopPropagation</h3><p>preventDefault：比如链接被点击会导航到其href指定的URL，这个就是默认行为；<br>stopPropagation：立即停止事件在DOM层次中的传播，包括捕获和冒泡事件；<br>IE中对应的属性：</p><ul><li>srcElement &#x3D;&gt; target</li><li>returnValue &#x3D;&gt; preventDefaukt()</li><li>cancelBubble &#x3D;&gt; stopPropagation()</li></ul><p>IE 不支持事件捕获，因而只能取消事件冒泡，但<code>stopPropagation</code>可以同时取消事件捕获和冒泡。<br>再针对上面不同类型的事件及属性进行区分：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> <span class="hljs-title class_">EventUtil</span> = &#123;<br>  <span class="hljs-comment">// element是当前元素，可以通过getElementById(id)获取</span><br>  <span class="hljs-comment">// type 是事件类型，一般是click ,也有可能是鼠标、焦点、滚轮事件等等</span><br>  <span class="hljs-comment">// handle 事件处理函数</span><br>  <span class="hljs-attr">addHandler</span>: <span class="hljs-function">(<span class="hljs-params">element, type, handler</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// 先检测是否存在DOM2级方法,再检测IE的方法，最后是DOM0级方法（一般不会到这）</span><br>    <span class="hljs-keyword">if</span> (element.<span class="hljs-property">addEventListener</span>) &#123;<br>      <span class="hljs-comment">// 第三个参数false表示冒泡阶段</span><br>      element.<span class="hljs-title function_">addEventListener</span>(type, handler, <span class="hljs-literal">false</span>);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (element.<span class="hljs-property">attachEvent</span>) &#123;<br>      element.<span class="hljs-title function_">attachEvent</span>(<span class="hljs-string">`on<span class="hljs-subst">$&#123;type&#125;</span>`</span>, handler)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      element[<span class="hljs-string">`on<span class="hljs-subst">$&#123;type&#125;</span>`</span>] = handler;<br>    &#125;<br>  &#125;,<br><br>  <span class="hljs-attr">removeHandler</span>: <span class="hljs-function">(<span class="hljs-params">element, type, handler</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (element.<span class="hljs-property">removeEventListener</span>) &#123;<br>      <span class="hljs-comment">// 第三个参数false表示冒泡阶段</span><br>      element.<span class="hljs-title function_">removeEventListener</span>(type, handler, <span class="hljs-literal">false</span>);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (element.<span class="hljs-property">detachEvent</span>) &#123;<br>      element.<span class="hljs-title function_">detachEvent</span>(<span class="hljs-string">`on<span class="hljs-subst">$&#123;type&#125;</span>`</span>, handler)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      element[<span class="hljs-string">`on<span class="hljs-subst">$&#123;type&#125;</span>`</span>] = <span class="hljs-literal">null</span>;<br>    &#125;<br>  &#125;,<br>  <span class="hljs-comment">// 获取event对象</span><br>  <span class="hljs-attr">getEvent</span>: <span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> event ? event : <span class="hljs-variable language_">window</span>.<span class="hljs-property">event</span><br>  &#125;,<br>  <span class="hljs-comment">// 获取当前目标</span><br>  <span class="hljs-attr">getTarget</span>: <span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> event.<span class="hljs-property">target</span> ? event.<span class="hljs-property">target</span> : event.<span class="hljs-property">srcElement</span><br>  &#125;,<br>  <span class="hljs-comment">// 阻止默认行为</span><br>  <span class="hljs-attr">preventDefault</span>: <span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (event.<span class="hljs-property">preventDefault</span>) &#123;<br>      event.<span class="hljs-title function_">preventDefault</span>()<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      event.<span class="hljs-property">returnValue</span> = <span class="hljs-literal">false</span><br>    &#125;<br>  &#125;,<br>  <span class="hljs-comment">// 停止传播事件</span><br>  <span class="hljs-attr">stopPropagation</span>: <span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (event,stopPropagation) &#123;<br>      event.<span class="hljs-title function_">stopPropagation</span>()<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      event.<span class="hljs-property">cancelBubble</span> = <span class="hljs-literal">true</span><br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="1-4-事件委托"><a href="#1-4-事件委托" class="headerlink" title="1.4. 事件委托"></a>1.4. 事件委托</h2><p>事件委托：用来解决事件处理程序过多的问题<br>页面结构如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;ul id=<span class="hljs-string">&quot;myLinks&quot;</span>&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;goSomewhere&quot;</span>&gt;</span>Go somewhere<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;doSomething&quot;</span>&gt;</span>Do something<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sayHi&quot;</span>&gt;</span>Say hi<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>&lt;/ul&gt;<br></code></pre></td></tr></table></figure><p>按照传统的做法，需要像下面这样为它们添加 3 个事 件处理程序。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> item1 = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;goSomewhere&quot;</span>);<br><span class="hljs-keyword">var</span> item2 = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;doSomething&quot;</span>);<br><span class="hljs-keyword">var</span> item3 = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;sayHi&quot;</span>);<br><span class="hljs-title class_">EventUtil</span>.<span class="hljs-title function_">addHandler</span>(item1, <span class="hljs-string">&quot;click&quot;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>)&#123;<br>    location.<span class="hljs-property">href</span> = <span class="hljs-string">&quot;http://www.xianzao.com&quot;</span>;<br>&#125;);<br><span class="hljs-title class_">EventUtil</span>.<span class="hljs-title function_">addHandler</span>(item2, <span class="hljs-string">&quot;click&quot;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>)&#123;<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-property">title</span> = <span class="hljs-string">&quot;I changed the document&#x27;s title&quot;</span>;<br>&#125;);<br><span class="hljs-title class_">EventUtil</span>.<span class="hljs-title function_">addHandler</span>(item3, <span class="hljs-string">&quot;click&quot;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>)&#123;<br>    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;hi&quot;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><p>如果在一个复杂的 Web 应用程序中，对所有可单击的元素都采用这种方式，那么结果就会有数不 清的代码用于添加事件处理程序。此时，可以利用事件委托技术解决这个问题。使用事件委托，只需在 DOM 树中尽量最高的层次上添加一个事件处理程序，如下面的例子所示</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> list = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;myLinks&quot;</span>);<br><span class="hljs-title class_">EventUtil</span>.<span class="hljs-title function_">addHandler</span>(list, <span class="hljs-string">&quot;click&quot;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>) &#123;<br>  event = <span class="hljs-title class_">EventUtil</span>.<span class="hljs-title function_">getEvent</span>(event);<br>  <span class="hljs-keyword">var</span> target = <span class="hljs-title class_">EventUtil</span>.<span class="hljs-title function_">getTarget</span>(event);<br>  <span class="hljs-keyword">switch</span>(target.<span class="hljs-property">id</span>) &#123;<br>  <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;doSomething&quot;</span>:<br>      <span class="hljs-variable language_">document</span>.<span class="hljs-property">title</span> = <span class="hljs-string">&quot;I changed the document&#x27;s title&quot;</span>;<br>      <span class="hljs-keyword">break</span>;<br>  <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;goSomewhere&quot;</span>:<br>      location.<span class="hljs-property">href</span> = <span class="hljs-string">&quot;http://www.wrox.com&quot;</span>;<br>      <span class="hljs-keyword">break</span>;<br>  <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;sayHi&quot;</span>: <span class="hljs-number">9</span> <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;hi&quot;</span>);<br>    <span class="hljs-keyword">break</span>; <br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>子节点的点击事件会冒泡到父节点，并被这个注册事件处理<br>最适合采用事件委托技术的事件包括 <code>click</code>、<code>mousedown</code>、<code>mouseup</code>、<code>keydown</code>、<code>keyup</code> 和 <code>keypress</code>。 虽然 <code>mouseover</code> 和 <code>mouseout</code> 事件也冒泡，但要适当处理它们并不容易，而且经常需要计算元素的位置。<br>可以考虑为 document 对象添加一个事件处理程序，用以处理页面上发生的某种特定类型的事件，需要跟踪的事件处理程序越少，移除它们就越容易（移除事件处理程序关乎内存和性能）。<br>只要是通过 <code>onload</code> 事件处理程序添加的东西，最后都要通过 <code>onunload</code> 事件处理程序将它们移除。</p><h1 id="2-浏览器请求"><a href="#2-浏览器请求" class="headerlink" title="2. 浏览器请求"></a>2. 浏览器请求</h1><p>在浏览器端发送网络请求的常见方式：</p><ol><li>ajax；</li><li>fetch；</li><li>axios；</li></ol><h2 id="2-1-ajax"><a href="#2-1-ajax" class="headerlink" title="2.1. ajax"></a>2.1. ajax</h2><blockquote><p>Asynchronous JavaScript And XML，翻译过来就是“异步的 Javascript 和 XML”。<br>ajax是js异步技术的术语，早起相关的api是XHR。</p></blockquote><p>Ajax 是一个技术统称，是一个概念模型，它囊括了很多技术，并不特指某一技术，它很重要的特性之一就是让页面实现局部刷新。<br>特点：</p><ul><li>局部刷新页面，无需重载整个页面。</li></ul><p>简单来说，Ajax 是一种思想，<code>XMLHttpRequest</code> 只是实现 Ajax 的一种方式。其中 <code>XMLHttpRequest</code> 模块就是实现 Ajax 的一种很好的方式。</p><h3 id="2-1-1-手写ajax"><a href="#2-1-1-手写ajax" class="headerlink" title="2.1.1. 手写ajax"></a>2.1.1. 手写ajax</h3><blockquote><p>建议先阅读<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest">MDN</a></p></blockquote><p>利用 <code>XMLHttpRequest</code> 模块实现 Ajax。</p><h4 id="2-1-1-1-创建异步对象"><a href="#2-1-1-1-创建异步对象" class="headerlink" title="2.1.1.1. 创建异步对象"></a>2.1.1.1. 创建异步对象</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> xmlHttp;<br><span class="hljs-keyword">if</span> (<span class="hljs-variable language_">window</span>.<span class="hljs-property">XMLHttpRequest</span>) &#123;<br>  <span class="hljs-comment">// code for IE7+, Firefox, Chrome, Opera, Safari</span><br>  xmlHttp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>();<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>  <span class="hljs-comment">// code for IE6, IE5</span><br>  xmlHttp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ActiveXObject</span>(<span class="hljs-string">&#x27;Microsoft.XMLHTTP&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>通过<code>XMLHttpRequest</code>构造函数创建一个异步对象<code>xmlhttp</code>, IE6, IE5 使用ActiveXObject创建，创建的这个异步对象上有很多属性和方法，常用的有：</p><ol><li><code>onreadystatechange</code>：监听异步对象请求状态码<code>readyState</code>的改变，每当<code>readyState</code>改变时，就会触发<code>onreadystatechange</code>事件；</li><li><code>readyState</code>：请求状态码</li></ol><p><code>readyState</code>表示异步对象目前的状态，状态码从0到4：<br>0: 表示请求未初始化，还没有调用 <code>open()</code>；<br>1: 服务器连接已建立，但是还没有调用 <code>send()</code>；<br>2: 请求已接收，正在处理中（通常现在可以从响应中获取内容头）；<br>3: 请求处理中，通常响应中已有部分数据可用了，没有全部完成；<br>4: 当<code>readyState</code>状态码为4时，表示请求已完成；此阶段确认全部数据都已经解析完毕，可以通过异步对象的属性获取对应数据；</p><ol><li>status：http状态码</li></ol><p>http状态码表示成功的http状态码有<br><code>xmlHttp.status &gt;= 200 &amp;&amp; xmlHttp.status &lt; 300 || xmlHttp.status == 304</code></p><ol><li>responseText：后台返回的字符串形式的响应数据；</li><li>responseXML：后台返回的XML形式的响应数据；</li></ol><h4 id="2-1-1-2-设置请求方式和请求地址"><a href="#2-1-1-2-设置请求方式和请求地址" class="headerlink" title="2.1.1.2. 设置请求方式和请求地址"></a>2.1.1.2. 设置请求方式和请求地址</h4><p>创建异步对象之后，通过<code>open()</code>方法设置ajax请求方式和请求地址 格式：<br><code>xmlHttp.open(&quot;GET/POST&quot;,&quot;ajax-get.txt&quot;,true)</code><br>第一个参数：请求的类型；GET 还是 POST；<br>第二个参数：表示请求的文件的地址url；<br>第三个参数：设置请求方法是不是异步async，true为异步， false为同步。AJAX存在的意义就是发异步请求，所以第三个参数永远传true；</p><p>注意：有个问题，就是IE中的缓存问题<br>在IE浏览器中，如果通过Ajax发送GET请求，那么IE浏览器认为，同一个URL只有一个结果，如果地址没有发生变化，它就会把上一次返回的结果，直接返回。这样我们不能实时的拿到变化后的数据。如果要想我们拿到实时数据，必须保证每次的URL都是不一样的，有两种方式：</p><ol><li>Math.random()；</li><li>new Date().getTime()；</li></ol><p>即在请求地址后面拼接上?t&#x3D;随机数或者1970.01.01至当前的毫秒数 所以在IE中通过ajax发送get请求时，可以设置请求地址为：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">xmlHttp.<span class="hljs-title function_">open</span>(<span class="hljs-string">&quot;GET&quot;</span>,<span class="hljs-string">&quot;ajax-get.txt?t=&quot;</span> + (<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().<span class="hljs-title function_">getTime</span>()),<span class="hljs-literal">true</span>);<br><span class="hljs-comment">//或</span><br>xmlHttp.<span class="hljs-title function_">open</span>(<span class="hljs-string">&quot;GET&quot;</span>,<span class="hljs-string">&quot;ajax-get.txt?t=&quot;</span> + <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>(),<span class="hljs-literal">true</span>);<br></code></pre></td></tr></table></figure><h4 id="2-1-1-3-发送请求"><a href="#2-1-1-3-发送请求" class="headerlink" title="2.1.1.3. 发送请求"></a>2.1.1.3. 发送请求</h4><p>直接通过异步对象的send()发送请求</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">xmlHttp.<span class="hljs-title function_">send</span>();<br></code></pre></td></tr></table></figure><p>特别注意的是： 如果发送POST请求，使用<code>setRequestHeader()</code>来添加 HTTP请求头，并在send()方法中传递要发送的数据：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">xmlHttp.<span class="hljs-title function_">open</span>(<span class="hljs-string">&quot;POST&quot;</span>,<span class="hljs-string">&quot;ajax_test.html&quot;</span>,<span class="hljs-literal">true</span>); <br>xmlHttp.<span class="hljs-title function_">setRequestHeader</span>(<span class="hljs-string">&quot;Content-type&quot;</span>,<span class="hljs-string">&quot;application/x-www-form-urlencoded&quot;</span>); <br>xmlHttp.<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;fname=Henry&amp;lname=Ford&quot;</span>);<br></code></pre></td></tr></table></figure><h4 id="2-1-1-4-通过onreadystatechange监听状态变化"><a href="#2-1-1-4-通过onreadystatechange监听状态变化" class="headerlink" title="2.1.1.4. 通过onreadystatechange监听状态变化"></a>2.1.1.4. 通过onreadystatechange监听状态变化</h4><p>当异步对象的readyState发生改变，会触发<code>onreadystatechange</code>函数，当readyState变成为4时，表示当前状态是请求完毕的状态，同时当http的响应码status为200到300之间（包括200和300）或为304时，表示ajax请求成功;当http状态码不是200到300之间的数也不是304时，表示请求不成功</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//4.监听状态变化</span><br>xmlHttp.<span class="hljs-property">onreadystatechange</span> = <span class="hljs-function">() =&gt;</span> &#123;<br> <span class="hljs-comment">// 判断当前状态改变是请求完毕的状态吗</span><br> <span class="hljs-keyword">if</span> (xmlHttp.<span class="hljs-property">readyState</span> === <span class="hljs-number">4</span>) &#123;<br>    <span class="hljs-keyword">if</span> (xmlHttp.<span class="hljs-property">status</span> &gt;= <span class="hljs-number">200</span> &amp;&amp; xmlHttp.<span class="hljs-property">status</span> &lt; <span class="hljs-number">300</span> || xmlHttp.<span class="hljs-property">status</span> == <span class="hljs-number">304</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;成功的接收到服务器返回的数据&quot;</span>);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;不成功！&quot;</span>);<br>    &#125;   <br> &#125;<br>&#125;  <br></code></pre></td></tr></table></figure><h4 id="2-1-1-5-处理返回的结果"><a href="#2-1-1-5-处理返回的结果" class="headerlink" title="2.1.1.5. 处理返回的结果"></a>2.1.1.5. 处理返回的结果</h4><p>如果成功，可通过异步对象的<code>responseText</code>属性来获取服务器返回的字符串<br>接下来，我们来封装一个方法ajax()用于发送请求<br>封装的时候，需要注意：</p><ol><li>URL当中只能出现字母 数字 下划线和ASCII码，不能出现中文，可以使用encodeURIComponent()转码；</li><li>当我们利用我们的ajax放的发送一个请求到远处服务器时，我们需要等待远程服务器去响应我们的请求，等待远程服务器将响应的结果返回给我们，但是这个响应的速度是不确定的，因为响应的速度是由本地网络和远程服务器的网速等共同决定的，所以我们不可能一直等待服务器的响应。这里需要设置超时时间；<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">ajax</span>(&#123;<br>  <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;GET&#x27;</span>,<br>  <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;http://localhost:3000/posts&#x27;</span>,<br>  <span class="hljs-attr">timeout</span>: <span class="hljs-number">1000</span>,<br>  <span class="hljs-attr">success</span>: <span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;success&#x27;</span>, data);<br>  &#125;,<br>  <span class="hljs-attr">error</span>: <span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;error&#x27;</span>, err);<br>  &#125;,<br>&#125;);<br><br></code></pre></td></tr></table></figure></li></ol><h4 id="2-1-1-6-其他"><a href="#2-1-1-6-其他" class="headerlink" title="2.1.1.6. 其他"></a>2.1.1.6. 其他</h4><p>至此，jQuery官方的ajax还是有一定的差异，所以还需要进一步完善</p><ol><li>传递多个参数，需要保持传递顺序。解决方案是可以改写成传递的是一个对象；因为对象里面的值，传递的是一个对象就不用考虑先后顺序，里面用的参数通过对象名.属性名的形式获取；</li><li>传递请求类型的区分大小写，jQuery官方的是大小写都可以；解决方案是可以使用<code>toLowerCase</code>()或者<code>toUpperCase</code>()将类型转成大写或小写再对比；</li><li>我们传递的数据用的名字是obj，jQuery官方用的是data；<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">ajax</span> = option =&gt; &#123;<br>  <span class="hljs-comment">//type, url, data, timeout, success, error将所有参数换成一个对象&#123;&#125;</span><br><br>  <span class="hljs-comment">//  0.将对象转换成字符串</span><br><br>  <span class="hljs-comment">//处理obj</span><br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">objToString</span> = data =&gt; &#123;<br>    data.<span class="hljs-property">t</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().<span class="hljs-title function_">getTime</span>();<br>    <span class="hljs-keyword">let</span> res = [];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> data) &#123;<br>      <span class="hljs-comment">//需要将key和value转成非中文的形式，因为url不能有中文。使用encodeURIComponent();</span><br>      res.<span class="hljs-title function_">push</span>(<span class="hljs-built_in">encodeURIComponent</span>(key) + <span class="hljs-string">&#x27; = &#x27;</span> + <span class="hljs-built_in">encodeURIComponent</span>(data[key]));<br>    &#125;<br>    <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;&amp;&#x27;</span>);<br>  &#125;;<br><br>  <span class="hljs-keyword">let</span> str = <span class="hljs-title function_">objToString</span>(option.<span class="hljs-property">data</span> || &#123;&#125;);<br><br>  <span class="hljs-comment">//  1.创建一个异步对象xmlHttp；</span><br>  <span class="hljs-keyword">var</span> xmlHttp, timer;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">window</span>.<span class="hljs-property">XMLHttpRequest</span>) &#123;<br>    xmlHttp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>();<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (xmlHttp) &#123;<br>    <span class="hljs-comment">// code for IE6, IE5</span><br>    xmlHttp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ActiveXObject</span>(<span class="hljs-string">&#x27;Microsoft.xmlHttp&#x27;</span>);<br>  &#125;<br><br>  <span class="hljs-comment">//  2.设置请求方式和请求地址；</span><br>  <span class="hljs-comment">// 判断请求的类型是POST还是GET</span><br>  <span class="hljs-keyword">if</span> (option.<span class="hljs-property">type</span>.<span class="hljs-title function_">toLowerCase</span>() === <span class="hljs-string">&#x27;get&#x27;</span>) &#123;<br>    xmlHttp.<span class="hljs-title function_">open</span>(option.<span class="hljs-property">type</span>, option.<span class="hljs-property">url</span> + <span class="hljs-string">&#x27;?t=&#x27;</span> + str, <span class="hljs-literal">true</span>);<br>    <span class="hljs-comment">//  3.发送请求；</span><br>    xmlHttp.<span class="hljs-title function_">send</span>();<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    xmlHttp.<span class="hljs-title function_">open</span>(option.<span class="hljs-property">type</span>, option.<span class="hljs-property">url</span>, <span class="hljs-literal">true</span>);<br>    <span class="hljs-comment">// 注意：在post请求中，必须在open和send之间添加HTTP请求头：setRequestHeader(header,value);</span><br>    xmlHttp.<span class="hljs-title function_">setRequestHeader</span>(<span class="hljs-string">&#x27;Content-type&#x27;</span>, <span class="hljs-string">&#x27;application/x-www-form-urlencoded&#x27;</span>);<br>    <span class="hljs-comment">//  3.发送请求；</span><br>    xmlHttp.<span class="hljs-title function_">send</span>(str);<br>  &#125;<br><br>  <span class="hljs-comment">//  4.监听状态的变化；</span><br>  xmlHttp.<span class="hljs-property">onreadystatechange</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-built_in">clearInterval</span>(timer);<br>    <span class="hljs-keyword">debugger</span>;<br>    <span class="hljs-keyword">if</span> (xmlHttp.<span class="hljs-property">readyState</span> === <span class="hljs-number">4</span>) &#123;<br>      <span class="hljs-keyword">if</span> ((xmlHttp.<span class="hljs-property">status</span> &gt;= <span class="hljs-number">200</span> &amp;&amp; xmlHttp.<span class="hljs-property">status</span> &lt; <span class="hljs-number">300</span>) || xmlHttp.<span class="hljs-property">status</span> == <span class="hljs-number">304</span>) &#123;<br>        <span class="hljs-comment">//  5.处理返回的结果；</span><br>        option.<span class="hljs-title function_">success</span>(xmlHttp.<span class="hljs-property">responseText</span>); <span class="hljs-comment">//成功后回调；</span><br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        option.<span class="hljs-title function_">error</span>(xmlHttp.<span class="hljs-property">responseText</span>); <span class="hljs-comment">//失败后回调；</span><br>      &#125;<br>    &#125;<br>  &#125;;<br><br>  <span class="hljs-comment">//判断外界是否传入了超时时间</span><br>  <span class="hljs-keyword">if</span> (option.<span class="hljs-property">timeout</span>) &#123;<br>    timer = <span class="hljs-built_in">setInterval</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>      xmlHttp.<span class="hljs-title function_">abort</span>(); <span class="hljs-comment">//中断请求</span><br>      <span class="hljs-built_in">clearInterval</span>(timer);<br>    &#125;, option.<span class="hljs-property">timeout</span>);<br>  &#125;<br>&#125;;<br></code></pre></td></tr></table></figure></li></ol><h3 id="2-1-2-测试"><a href="#2-1-2-测试" class="headerlink" title="2.1.2. 测试"></a>2.1.2. 测试</h3><p>选择<code>json-server</code>启动本地服务，mock数据：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&#123;<br>  <span class="hljs-string">&quot;posts&quot;</span>: [<br>    &#123;<br>      <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-number">1</span>,<br>      <span class="hljs-string">&quot;title&quot;</span>: <span class="hljs-string">&quot;json-server&quot;</span>,<br>      <span class="hljs-string">&quot;author&quot;</span>: <span class="hljs-string">&quot;xianzao&quot;</span><br>    &#125;<br>  ],<br>  <span class="hljs-string">&quot;comments&quot;</span>: [<br>    &#123;<br>      <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-number">1</span>,<br>      <span class="hljs-string">&quot;body&quot;</span>: <span class="hljs-string">&quot;some comment&quot;</span>,<br>      <span class="hljs-string">&quot;postId&quot;</span>: <span class="hljs-number">1</span><br>    &#125;<br>  ],<br>  <span class="hljs-string">&quot;profile&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;xianzao&quot;</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>执行代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">ajax</span>(&#123;<br>  <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;GET&#x27;</span>,<br>  <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;http://localhost:3000/posts&#x27;</span>,<br>  <span class="hljs-attr">timeout</span>: <span class="hljs-number">1000</span>,<br>  <span class="hljs-attr">success</span>: <span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;success&#x27;</span>, data);<br>  &#125;,<br>  <span class="hljs-attr">error</span>: <span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;error&#x27;</span>, err);<br>  &#125;,<br>&#125;);<br><br></code></pre></td></tr></table></figure><h3 id="2-1-3-实现Upload的request封装"><a href="#2-1-3-实现Upload的request封装" class="headerlink" title="2.1.3. 实现Upload的request封装"></a>2.1.3. 实现Upload的request封装</h3><p>针对<code>fusion</code>中 <code>[Upload](https://fusion.design/pc/component/upload)</code>组件，实现自定义请求的封装。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">customRequest</span>(<span class="hljs-params">option</span>) &#123;<br>    <span class="hljs-comment">/* coding here */</span><br>    <span class="hljs-keyword">return</span> &#123;<span class="hljs-title function_">abort</span>(<span class="hljs-params"></span>) &#123;<span class="hljs-comment">/* coding here */</span>&#125;&#125;;<br>&#125;<br><br>&lt;<span class="hljs-title class_">Upload</span> request=&#123;customRequest&#125;/&gt;<br></code></pre></td></tr></table></figure><p>其中，<code>customRequest</code>的实现如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * clone from https://github.com/react-component/upload/blob/master/src/request.js</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getError</span>(<span class="hljs-params">option, xhr, msg</span>) &#123;<br>    msg = msg || <span class="hljs-string">`cannot post <span class="hljs-subst">$&#123;option.action&#125;</span> <span class="hljs-subst">$&#123;xhr.status&#125;</span>&#x27;`</span>;<br>    <span class="hljs-keyword">const</span> err = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(msg);<br>    err.<span class="hljs-property">status</span> = xhr.<span class="hljs-property">status</span>;<br>    err.<span class="hljs-property">method</span> = option.<span class="hljs-property">method</span>;<br>    err.<span class="hljs-property">url</span> = option.<span class="hljs-property">action</span>;<br>    <span class="hljs-keyword">return</span> err;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getBody</span>(<span class="hljs-params">xhr</span>) &#123;<br>    <span class="hljs-keyword">const</span> text = xhr.<span class="hljs-property">responseText</span> || xhr.<span class="hljs-property">response</span>;<br>    <span class="hljs-keyword">if</span> (!text) &#123;<br>        <span class="hljs-keyword">return</span> text;<br>    &#125;<br><br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(text);<br>    &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>        <span class="hljs-keyword">return</span> text;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// option &#123;</span><br><span class="hljs-comment">//  onProgress: (event: &#123; percent: number &#125;): void,</span><br><span class="hljs-comment">//  onError: (event: Error, body?: Object): void,</span><br><span class="hljs-comment">//  onSuccess: (body: Object): void,</span><br><span class="hljs-comment">//  data: Object,</span><br><span class="hljs-comment">//  filename: String,</span><br><span class="hljs-comment">//  file: File,</span><br><span class="hljs-comment">//  withCredentials: Boolean,</span><br><span class="hljs-comment">//  action: String,</span><br><span class="hljs-comment">//  headers: Object,</span><br><span class="hljs-comment">//  method: String</span><br><span class="hljs-comment">//  timeout: Number</span><br><span class="hljs-comment">// &#125;</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">upload</span>(<span class="hljs-params">option</span>) &#123;<br>    <span class="hljs-keyword">const</span> xhr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>();<br><br>    <span class="hljs-keyword">if</span> (option.<span class="hljs-property">onProgress</span> &amp;&amp; xhr.<span class="hljs-property">upload</span>) &#123;<br>        xhr.<span class="hljs-property">upload</span>.<span class="hljs-property">onprogress</span> = <span class="hljs-keyword">function</span> <span class="hljs-title function_">progress</span>(<span class="hljs-params">e</span>) &#123;<br>            <span class="hljs-keyword">if</span> (e.<span class="hljs-property">total</span> &gt; <span class="hljs-number">0</span>) &#123;<br>                e.<span class="hljs-property">percent</span> = (e.<span class="hljs-property">loaded</span> / e.<span class="hljs-property">total</span>) * <span class="hljs-number">100</span>;<br>            &#125;<br>            option.<span class="hljs-title function_">onProgress</span>(e);<br>        &#125;;<br>    &#125;<br><br>    <span class="hljs-keyword">const</span> formData = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FormData</span>();<br><br>    <span class="hljs-keyword">if</span> (option.<span class="hljs-property">data</span>) &#123;<br>        <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(option.<span class="hljs-property">data</span>).<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">key</span> =&gt;</span> &#123;<br>            formData.<span class="hljs-title function_">append</span>(key, option.<span class="hljs-property">data</span>[key]);<br>        &#125;);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (option.<span class="hljs-property">file</span> <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Blob</span>) &#123;<br>        formData.<span class="hljs-title function_">append</span>(option.<span class="hljs-property">filename</span>, option.<span class="hljs-property">file</span>, option.<span class="hljs-property">file</span>.<span class="hljs-property">name</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        formData.<span class="hljs-title function_">append</span>(option.<span class="hljs-property">filename</span>, option.<span class="hljs-property">file</span>);<br>    &#125;<br><br>    xhr.<span class="hljs-property">onerror</span> = <span class="hljs-keyword">function</span> <span class="hljs-title function_">error</span>(<span class="hljs-params">e</span>) &#123;<br>        option.<span class="hljs-title function_">onError</span>(e);<br>    &#125;;<br><br>    xhr.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span> <span class="hljs-title function_">onload</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-comment">// allow success when 2xx status</span><br>        <span class="hljs-comment">// see https://github.com/react-component/upload/issues/34</span><br>        <span class="hljs-keyword">if</span> (xhr.<span class="hljs-property">status</span> &lt; <span class="hljs-number">200</span> || xhr.<span class="hljs-property">status</span> &gt;= <span class="hljs-number">300</span>) &#123;<br>            <span class="hljs-keyword">return</span> option.<span class="hljs-title function_">onError</span>(<span class="hljs-title function_">getError</span>(option, xhr), <span class="hljs-title function_">getBody</span>(xhr));<br>        &#125;<br><br>        option.<span class="hljs-title function_">onSuccess</span>(<span class="hljs-title function_">getBody</span>(xhr), xhr);<br>    &#125;;<br><br>    option.<span class="hljs-property">method</span> = option.<span class="hljs-property">method</span> || <span class="hljs-string">&#x27;POST&#x27;</span>;<br>    xhr.<span class="hljs-title function_">open</span>(option.<span class="hljs-property">method</span>, option.<span class="hljs-property">action</span>, <span class="hljs-literal">true</span>);<br><br>    <span class="hljs-comment">// In Internet Explorer, the timeout property may be set only after calling the open() method and before calling the send() method.</span><br>    <span class="hljs-comment">// see https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/timeout</span><br>    <span class="hljs-keyword">const</span> &#123; timeout &#125; = option;<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> timeout === <span class="hljs-string">&#x27;number&#x27;</span> &amp;&amp; timeout &gt; <span class="hljs-number">0</span>) &#123;<br>        xhr.<span class="hljs-property">timeout</span> = timeout;<br>        xhr.<span class="hljs-property">ontimeout</span> = <span class="hljs-function">() =&gt;</span> &#123;<br>            <span class="hljs-keyword">const</span> msg = <span class="hljs-string">`Upload abort for exceeding time (timeout: <span class="hljs-subst">$&#123;timeout&#125;</span>ms)`</span>;<br>            option.<span class="hljs-title function_">onError</span>(<span class="hljs-title function_">getError</span>(option, xhr, msg), <span class="hljs-title function_">getBody</span>(xhr));<br>        &#125;;<br>    &#125;<br><br>    <span class="hljs-comment">// Has to be after `.open()`. See https://github.com/enyo/dropzone/issues/179</span><br>    <span class="hljs-keyword">if</span> (option.<span class="hljs-property">withCredentials</span> &amp;&amp; <span class="hljs-string">&#x27;withCredentials&#x27;</span> <span class="hljs-keyword">in</span> xhr) &#123;<br>        xhr.<span class="hljs-property">withCredentials</span> = <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">const</span> headers = option.<span class="hljs-property">headers</span> || &#123;&#125;;<br><br>    <span class="hljs-comment">// when set headers[&#x27;X-Requested-With&#x27;] = null , can close default XHR header</span><br>    <span class="hljs-comment">// see https://github.com/react-component/upload/issues/33</span><br>    <span class="hljs-keyword">if</span> (headers[<span class="hljs-string">&#x27;X-Requested-With&#x27;</span>] !== <span class="hljs-literal">null</span>) &#123;<br>        xhr.<span class="hljs-title function_">setRequestHeader</span>(<span class="hljs-string">&#x27;X-Requested-With&#x27;</span>, <span class="hljs-string">&#x27;XMLHttpRequest&#x27;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> h <span class="hljs-keyword">in</span> headers) &#123;<br>        <span class="hljs-keyword">if</span> (headers.<span class="hljs-title function_">hasOwnProperty</span>(h) &amp;&amp; headers[h] !== <span class="hljs-literal">null</span>) &#123;<br>            xhr.<span class="hljs-title function_">setRequestHeader</span>(h, headers[h]);<br>        &#125;<br>    &#125;<br>    xhr.<span class="hljs-title function_">send</span>(formData);<br><br>    <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-title function_">abort</span>(<span class="hljs-params"></span>) &#123;<br>            xhr.<span class="hljs-title function_">abort</span>();<br>        &#125;,<br>    &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-1-4-总结"><a href="#2-1-4-总结" class="headerlink" title="2.1.4. 总结"></a>2.1.4. 总结</h3><p>我们可以发现，ajax只是一种异步请求的方式，并不特指某一种具体的实现方式，但随着使用这种方式实现网络请求时内部又包含请求的情况，就会出现回调地狱，这也是XHR的诟病之一，因此，后来才催生了更加优雅的请求方式。</p><h2 id="2-2-fetch"><a href="#2-2-fetch" class="headerlink" title="2.2. fetch"></a>2.2. fetch</h2><p>Fetch 是在 ES6 出现的，它使用了 ES6 提出的 Promise 对象。它是 <code>XMLHttpRequest</code> 的替代品。<br>有人把它与 Ajax 作比较，其实这是不对的，我们通常所说的 Ajax 是指使用 <code>XMLHttpRequest</code> 实现的 Ajax，所以真正应该和 <code>XMLHttpRequest</code> 作比较。</p><blockquote><p>Fetch 是一个 API，它是真实存在的，它是基于 Promise 的。<br>建议阅读：<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API">MDN</a><br>以下内容摘选自：<a href="https://www.ruanyifeng.com/blog/2020/12/fetch-tutorial.html">fetch教学</a></p></blockquote><p>fetch()的功能与 XMLHttpRequest 基本相同，但有三个差异：</p><ol><li>fetch使用 Promise，不使用回调函数，因此大大简化了写法，写起来更简洁；</li><li>fetch采用模块化设计，API 分散在多个对象上（Response 对象、Request 对象、Headers 对象），更合理一些；相比之下，<code>XMLHttpRequest</code> 的 API 设计并不是很好，输入、输出、状态都在同一个接口管理，容易写出非常混乱的代码；</li><li>fetch通过数据流（Stream 对象）处理数据，可以分块读取，有利于提高网站性能表现，减少内存占用，对于请求大文件或者网速慢的场景相当有用。<code>XMLHTTPRequest</code> 对象不支持数据流，所有的数据必须放在缓存里，不支持分块读取，必须等待全部拿到后，再一次性吐出来；</li></ol><p>在用法上，fetch()接受一个 URL 字符串作为参数，默认向该网址发出 GET 请求，返回一个 Promise 对象。它的基本用法如下。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">fetch</span>(url)<br>  .<span class="hljs-title function_">then</span>(...)<br>  .<span class="hljs-title function_">catch</span>(...)<br></code></pre></td></tr></table></figure><p>下面是一个demo，从服务器获取 JSON 数据。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">fetch</span>(<span class="hljs-string">&#x27;https://api.github.com/users/ruanyf&#x27;</span>)<br>  .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> response.<span class="hljs-title function_">json</span>())<br>  .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">json</span> =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(json))<br>  .<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Request Failed&#x27;</span>, err)); <br></code></pre></td></tr></table></figure><p>fetch()接收到的response是一个 <a href="https://developer.mozilla.org/en-US/docs/Web/API/Streams_API">Stream 对象</a>，<code>response.json()</code>是一个异步操作，取出所有内容，并将其转为 JSON 对象。<br>Promise 可以使用 await 语法改写，使得语义更清晰。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">getJSON</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">let</span> url = <span class="hljs-string">&#x27;https://api.github.com/users/ruanyf&#x27;</span>;<br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-keyword">let</span> response = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(url);<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">await</span> response.<span class="hljs-title function_">json</span>();<br>  &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Request Failed&#x27;</span>, error);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>上面示例中，await语句必须放在<code>try...catch</code>里面，这样才能捕捉异步操作中可能发生的错误。</p><h3 id="2-2-1-Response"><a href="#2-2-1-Response" class="headerlink" title="2.2.1. Response"></a>2.2.1. Response</h3><ol><li>Response 对象的同步属性</li></ol><p>fetch()请求成功以后，得到的是一个 <a href="https://developer.mozilla.org/en-US/docs/Web/API/Response">Response 对象</a>。它对应服务器的 HTTP 回应。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(url);<br></code></pre></td></tr></table></figure><p>Response 包含的数据通过 Stream 接口异步读取，但是它还包含一些同步属性，对应 HTTP 回应的标头信息（Headers），可以立即读取。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">fetchText</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">let</span> response = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(<span class="hljs-string">&#x27;/readme.txt&#x27;</span>);<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(response.<span class="hljs-property">status</span>); <br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(response.<span class="hljs-property">statusText</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><code>response.status</code>和<code>response.statusText</code>就是 Response 的同步属性，可以立即读取。</p><h4 id="2-2-1-1-标头信息"><a href="#2-2-1-1-标头信息" class="headerlink" title="2.2.1.1. 标头信息"></a>2.2.1.1. 标头信息</h4><ol><li><code>Response.ok</code></li></ol><p><code>Response.ok</code>属性返回一个布尔值，表示请求是否成功，true对应 HTTP 请求的状态码 200 到 299，false对应其他的状态码；</p><ol><li><code>Response.status</code></li></ol><p><code>Response.status</code>属性返回一个数字，表示 HTTP 回应的状态码（例如200，表示成功请求）；</p><ol><li><code>Response.statusText</code></li></ol><p><code>Response.statusText</code>属性返回一个字符串，表示 HTTP 回应的状态信息（例如请求成功以后，服务器返回”OK”）；</p><ol><li><code>Response.url</code></li></ol><p><code>Response.url</code>属性返回请求的 URL。如果 URL 存在跳转，该属性返回的是最终 URL；</p><ol><li><code>Response.type</code></li></ol><p><code>Response.type</code>属性返回请求的类型。可能的值如下：</p><ul><li>basic：普通请求，即同源请求；</li><li>cors：跨域请求；</li><li>error：网络错误，主要用于 Service Worker；</li><li>opaque：如果fetch()请求的type属性设为no-cors，就会返回这个值。表示发出的是简单的跨域请求，类似<form>表单的那种跨域请求；</li><li>opaqueredirect：如果fetch()请求的redirect属性设为manual，就会返回这个值；</li></ul><ol><li><code>Response.redirected</code></li></ol><p><code>Response.redirected</code>属性返回一个布尔值，表示请求是否发生过跳转。</p><h4 id="2-2-1-2-判断请求是否成功"><a href="#2-2-1-2-判断请求是否成功" class="headerlink" title="2.2.1.2. 判断请求是否成功"></a>2.2.1.2. 判断请求是否成功</h4><p>fetch()发出请求以后，有一个很重要的注意点：只有网络错误，或者无法连接时，fetch()才会报错，其他情况都不会报错，而是认为请求成功。<br>这就是说，即使服务器返回的状态码是 4xx 或 5xx，fetch()也不会报错（即 Promise 不会变为 rejected状态）。</p><ol><li>Response.status</li></ol><p><code>Response.status</code>属性，得到 HTTP 回应的真实状态码，才能判断请求是否成功。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">fetchText</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">let</span> response = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(<span class="hljs-string">&#x27;/readme.txt&#x27;</span>);<br>  <span class="hljs-keyword">if</span> (response.<span class="hljs-property">status</span> &gt;= <span class="hljs-number">200</span> &amp;&amp; response.<span class="hljs-property">status</span> &lt; <span class="hljs-number">300</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">await</span> response.<span class="hljs-title function_">text</span>();<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(response.<span class="hljs-property">statusText</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>response.status</code>属性只有等于 2xx （200~299），才能认定请求成功。这里不用考虑网址跳转（状态码为 3xx），因为fetch()会将跳转的状态码自动转为 200。</p><ol><li>response.ok是否为true<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">if</span> (response.<span class="hljs-property">ok</span>) &#123;<br>  <span class="hljs-comment">// 请求成功</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>  <span class="hljs-comment">// 请求失败</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h4 id="2-2-1-3-Response-headers"><a href="#2-2-1-3-Response-headers" class="headerlink" title="2.2.1.3. Response.headers"></a>2.2.1.3. Response.headers</h4><p>Response 对象还有一个Response.headers属性，指向一个 <a href="https://developer.mozilla.org/en-US/docs/Web/API/Headers">Headers 对象</a>，对应 HTTP 回应的所有标头。<br>Headers 对象可以使用for…of循环进行遍历。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(url);<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> [key, value] <span class="hljs-keyword">of</span> response.<span class="hljs-property">headers</span>) &#123; <br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;key&#125;</span> : <span class="hljs-subst">$&#123;value&#125;</span>`</span>);  <br>&#125;<br><br><span class="hljs-comment">// 或者</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> [key, value] <span class="hljs-keyword">of</span> response.<span class="hljs-property">headers</span>.<span class="hljs-title function_">entries</span>()) &#123; <br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;key&#125;</span> : <span class="hljs-subst">$&#123;value&#125;</span>`</span>);  <br>&#125;<br></code></pre></td></tr></table></figure><p>Headers 对象提供了以下方法，用来操作标头。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Headers</span>.<span class="hljs-title function_">get</span>()：根据指定的键名，返回键值。<br><span class="hljs-title class_">Headers</span>.<span class="hljs-title function_">has</span>()： 返回一个布尔值，表示是否包含某个标头。<br><span class="hljs-title class_">Headers</span>.<span class="hljs-title function_">set</span>()：将指定的键名设置为新的键值，如果该键名不存在则会添加。<br><span class="hljs-title class_">Headers</span>.<span class="hljs-title function_">append</span>()：添加标头。<br><span class="hljs-title class_">Headers</span>.<span class="hljs-title function_">delete</span>()：删除标头。<br><span class="hljs-title class_">Headers</span>.<span class="hljs-title function_">keys</span>()：返回一个遍历器，可以依次遍历所有键名。<br><span class="hljs-title class_">Headers</span>.<span class="hljs-title function_">values</span>()：返回一个遍历器，可以依次遍历所有键值。<br><span class="hljs-title class_">Headers</span>.<span class="hljs-title function_">entries</span>()：返回一个遍历器，可以依次遍历所有键值对（[key, value]）。<br><span class="hljs-title class_">Headers</span>.<span class="hljs-title function_">forEach</span>()：依次遍历标头，每个标头都会执行一次参数函数。<br></code></pre></td></tr></table></figure><p>这些方法中，最常用的是<code>response.headers.get()</code>，用于读取某个标头的值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> response =  <span class="hljs-keyword">await</span>  <span class="hljs-title function_">fetch</span>(url);  <br>response.<span class="hljs-property">headers</span>.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;Content-Type&#x27;</span>)<br><span class="hljs-comment">// application/json; charset=utf-8</span><br></code></pre></td></tr></table></figure><p><code>Headers.keys()</code>和<code>Headers.values()</code>方法用来分别遍历标头的键名和键值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 键名</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> key <span class="hljs-keyword">of</span> myHeaders.<span class="hljs-title function_">keys</span>()) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(key);<br>&#125;<br><br><span class="hljs-comment">// 键值</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> value <span class="hljs-keyword">of</span> myHeaders.<span class="hljs-title function_">values</span>()) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(value);<br>&#125;<br></code></pre></td></tr></table></figure><p>Headers.forEach()方法也可以遍历所有的键值和键名。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> response = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(url);<br>response.<span class="hljs-property">headers</span>.<span class="hljs-title function_">forEach</span>(<br>  <span class="hljs-function">(<span class="hljs-params">value, key</span>) =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(key, <span class="hljs-string">&#x27;:&#x27;</span>, value)<br>);<br></code></pre></td></tr></table></figure><h4 id="2-2-1-4-读取内容的方法"><a href="#2-2-1-4-读取内容的方法" class="headerlink" title="2.2.1.4. 读取内容的方法"></a>2.2.1.4. 读取内容的方法</h4><p>Response对象根据服务器返回的不同类型的数据，提供了不同的读取方法。</p><ul><li>response.text()：得到文本字符串；</li><li>response.json()：得到 JSON 对象；</li><li>response.blob()：得到二进制 Blob 对象；</li><li>response.formData()：得到 FormData 表单对象；</li><li>response.arrayBuffer()：得到二进制 ArrayBuffer 对象；</li></ul><p>这5个读取方法都是异步的，返回的都是 Promise 对象。必须等到异步操作结束，才能得到服务器返回的完整数据。</p><ol><li>response.text()</li></ol><p><code>response.text()</code>可以用于获取文本数据，比如 HTML 文件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(<span class="hljs-string">&#x27;/users.html&#x27;</span>);<br><span class="hljs-keyword">const</span> body = <span class="hljs-keyword">await</span> response.<span class="hljs-title function_">text</span>();<br><span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-property">innerHTML</span> = body<br></code></pre></td></tr></table></figure><ol><li>response.json()</li></ol><p><code>response.json()</code>主要用于获取服务器返回的 JSON 数据。</p><ol><li>response.formData()</li></ol><p><code>response.formData()</code>主要用在 Service Worker 里面，拦截用户提交的表单，修改某些数据以后，再提交给服务器。</p><ol><li>response.blob()</li></ol><p><code>response.blob()</code>用于获取二进制文件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(<span class="hljs-string">&#x27;flower.jpg&#x27;</span>);<br><span class="hljs-keyword">const</span> myBlob = <span class="hljs-keyword">await</span> response.<span class="hljs-title function_">blob</span>();<br><span class="hljs-keyword">const</span> objectURL = <span class="hljs-variable constant_">URL</span>.<span class="hljs-title function_">createObjectURL</span>(myBlob);<br><br><span class="hljs-keyword">const</span> myImage = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;img&#x27;</span>);<br>myImage.<span class="hljs-property">src</span> = objectURL;<br></code></pre></td></tr></table></figure><p>上面示例读取图片文件flower.jpg，显示在网页上。</p><ol><li>response.arrayBuffer()</li></ol><p><code>response.arrayBuffer()</code>主要用于获取流媒体文件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> audioCtx = <span class="hljs-keyword">new</span> <span class="hljs-variable language_">window</span>.<span class="hljs-title class_">AudioContext</span>();<br><span class="hljs-keyword">const</span> source = audioCtx.<span class="hljs-title function_">createBufferSource</span>();<br><br><span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(<span class="hljs-string">&#x27;song.ogg&#x27;</span>);<br><span class="hljs-keyword">const</span> buffer = <span class="hljs-keyword">await</span> response.<span class="hljs-title function_">arrayBuffer</span>();<br><br><span class="hljs-keyword">const</span> decodeData = <span class="hljs-keyword">await</span> audioCtx.<span class="hljs-title function_">decodeAudioData</span>(buffer);<br>source.<span class="hljs-property">buffer</span> = buffer;<br>source.<span class="hljs-title function_">connect</span>(audioCtx.<span class="hljs-property">destination</span>);<br>source.<span class="hljs-property">loop</span> = <span class="hljs-literal">true</span>;<br></code></pre></td></tr></table></figure><p>上面示例是response.arrayBuffer()获取音频文件song.ogg，然后在线播放的例子。</p><h4 id="2-2-1-5-Response-clone"><a href="#2-2-1-5-Response-clone" class="headerlink" title="2.2.1.5. Response.clone"></a>2.2.1.5. Response.clone</h4><p>Stream 对象只能读取一次，读取完就没了。这意味着，前一节的五个读取方法，只能使用一个，否则会报错。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> text =  <span class="hljs-keyword">await</span> response.<span class="hljs-title function_">text</span>();<br><span class="hljs-keyword">let</span> json =  <span class="hljs-keyword">await</span> response.<span class="hljs-title function_">json</span>();  <span class="hljs-comment">// 报错</span><br></code></pre></td></tr></table></figure><p>上面示例先使用了<code>response.text()</code>，就把 Stream 读完了。后面再调用<code>response.json()</code>，就没有内容可读了，所以报错。<br>Response 对象提供<code>Response.clone()</code>方法，创建Response对象的副本，实现多次读取。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> response1 = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(<span class="hljs-string">&#x27;flowers.jpg&#x27;</span>);<br><span class="hljs-keyword">const</span> response2 = response1.<span class="hljs-title function_">clone</span>();<br><br><span class="hljs-keyword">const</span> myBlob1 = <span class="hljs-keyword">await</span> response1.<span class="hljs-title function_">blob</span>();<br><span class="hljs-keyword">const</span> myBlob2 = <span class="hljs-keyword">await</span> response2.<span class="hljs-title function_">blob</span>();<br><br>image1.<span class="hljs-property">src</span> = <span class="hljs-variable constant_">URL</span>.<span class="hljs-title function_">createObjectURL</span>(myBlob1);<br>image2.<span class="hljs-property">src</span> = <span class="hljs-variable constant_">URL</span>.<span class="hljs-title function_">createObjectURL</span>(myBlob2);<br></code></pre></td></tr></table></figure><p>上面示例中，<code>response.clone()</code>复制了一份 Response 对象，然后将同一张图片读取了两次。</p><h4 id="2-2-1-6-Response-body"><a href="#2-2-1-6-Response-body" class="headerlink" title="2.2.1.6. Response.body"></a>2.2.1.6. Response.body</h4><p><code>Response.body</code>属性是 Response 对象暴露出的底层接口，返回一个 <code>ReadableStream</code> 对象，供用户操作。<br>它可以用来分块读取内容，应用之一就是显示下载的进度。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(<span class="hljs-string">&#x27;flower.jpg&#x27;</span>);<br><span class="hljs-keyword">const</span> reader = response.<span class="hljs-property">body</span>.<span class="hljs-title function_">getReader</span>();<br><br><span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>) &#123;<br>  <span class="hljs-keyword">const</span> &#123;done, value&#125; = <span class="hljs-keyword">await</span> reader.<span class="hljs-title function_">read</span>();<br><br>  <span class="hljs-keyword">if</span> (done) &#123;<br>    <span class="hljs-keyword">break</span>;<br>  &#125;<br><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`Received <span class="hljs-subst">$&#123;value.length&#125;</span> bytes`</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p><code>response.body.getReader()</code>方法返回一个遍历器。这个遍历器的read()方法每次返回一个对象，表示本次读取的内容块。<br>这个对象的done属性是一个布尔值，用来判断有没有读完；value属性是一个 arrayBuffer 数组，表示内容块的内容，而value.length属性是当前块的大小。</p><h3 id="2-2-2-定制-HTTP-请求"><a href="#2-2-2-定制-HTTP-请求" class="headerlink" title="2.2.2. 定制 HTTP 请求"></a>2.2.2. 定制 HTTP 请求</h3><p>fetch()的第一个参数是 URL，还可以接受第二个参数，作为配置对象，定制发出的 HTTP 请求</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">fetch</span>(url, optionObj)<br></code></pre></td></tr></table></figure><p>HTTP 请求的方法、标头、数据体都在这个对象里面设置。</p><h4 id="2-2-2-1-POST-请求"><a href="#2-2-2-1-POST-请求" class="headerlink" title="2.2.2.1. POST 请求"></a>2.2.2.1. POST 请求</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(url, &#123;<br>  <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;POST&#x27;</span>,<br>  <span class="hljs-attr">headers</span>: &#123;<br>    <span class="hljs-string">&quot;Content-type&quot;</span>: <span class="hljs-string">&quot;application/x-www-form-urlencoded; charset=UTF-8&quot;</span>,<br>  &#125;,<br>  <span class="hljs-attr">body</span>: <span class="hljs-string">&#x27;foo=bar&amp;lorem=ipsum&#x27;</span>,<br>&#125;);<br><br><span class="hljs-keyword">const</span> json = <span class="hljs-keyword">await</span> response.<span class="hljs-title function_">json</span>();<br></code></pre></td></tr></table></figure><p>配置对象用到了三个属性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">method：<span class="hljs-variable constant_">HTTP</span> 请求的方法，<span class="hljs-variable constant_">POST</span>、<span class="hljs-variable constant_">DELETE</span>、<span class="hljs-variable constant_">PUT</span>都在这个属性设置。<br>headers：一个对象，用来定制 <span class="hljs-variable constant_">HTTP</span> 请求的标头。<br>body：<span class="hljs-variable constant_">POST</span> 请求的数据体。<br></code></pre></td></tr></table></figure><p>注意，有些标头不能通过headers属性设置，比如<code>Content-Length</code>、Cookie、Host等等。它们是由浏览器自动生成，无法修改。</p><h4 id="2-2-2-2-提交-JSON-数据"><a href="#2-2-2-2-提交-JSON-数据" class="headerlink" title="2.2.2.2. 提交 JSON 数据"></a>2.2.2.2. 提交 JSON 数据</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> user =  &#123; <span class="hljs-attr">name</span>:  <span class="hljs-string">&#x27;John&#x27;</span>, <span class="hljs-attr">surname</span>:  <span class="hljs-string">&#x27;Smith&#x27;</span>  &#125;;<br><span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(<span class="hljs-string">&#x27;/article/fetch/post/user&#x27;</span>, &#123;<br>  <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;POST&#x27;</span>,<br>  <span class="hljs-attr">headers</span>: &#123;<br>   <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;application/json;charset=utf-8&#x27;</span><br>  &#125;, <br>  <span class="hljs-attr">body</span>: <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(user) <br>&#125;);<br></code></pre></td></tr></table></figure><p>标头<code>Content-Type</code>要设成<code>&#39;application/json;charset=utf-8&#39;</code>。因为默认发送的是纯文本，<code>Content-Type</code>的默认值是<code>&#39;text/plain;charset=UTF-8&#39;</code>。</p><h4 id="2-2-2-3-提交表单"><a href="#2-2-2-3-提交表单" class="headerlink" title="2.2.2.3. 提交表单"></a>2.2.2.3. 提交表单</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> form = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;form&#x27;</span>);<br><br><span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(<span class="hljs-string">&#x27;/users&#x27;</span>, &#123;<br>  <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;POST&#x27;</span>,<br>  <span class="hljs-attr">body</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">FormData</span>(form)<br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="2-2-2-4-文件上传"><a href="#2-2-2-4-文件上传" class="headerlink" title="2.2.2.4. 文件上传"></a>2.2.2.4. 文件上传</h4><p>如果表单里面有文件选择器，可以用前一个例子的写法，上传的文件包含在整个表单里面，一起提交。<br>另一种方法是用脚本添加文件，构造出一个表单，进行上传，请看下面的例子。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> input = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;input[type=&quot;file&quot;]&#x27;</span>);<br><br><span class="hljs-keyword">const</span> data = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FormData</span>();<br>data.<span class="hljs-title function_">append</span>(<span class="hljs-string">&#x27;file&#x27;</span>, input.<span class="hljs-property">files</span>[<span class="hljs-number">0</span>]);<br>data.<span class="hljs-title function_">append</span>(<span class="hljs-string">&#x27;user&#x27;</span>, <span class="hljs-string">&#x27;foo&#x27;</span>);<br><br><span class="hljs-title function_">fetch</span>(<span class="hljs-string">&#x27;/avatars&#x27;</span>, &#123;<br>  <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;POST&#x27;</span>,<br>  <span class="hljs-attr">body</span>: data<br>&#125;);<br></code></pre></td></tr></table></figure><h4 id="2-2-2-5-直接上传二进制数据"><a href="#2-2-2-5-直接上传二进制数据" class="headerlink" title="2.2.2.5. 直接上传二进制数据"></a>2.2.2.5. 直接上传二进制数据</h4><p>fetch()也可以直接上传二进制数据，将 Blob 或 arrayBuffer 数据放在body属性里面。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> blob = <span class="hljs-keyword">await</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function"><span class="hljs-params">resolve</span> =&gt;</span>   <br>  canvasElem.<span class="hljs-title function_">toBlob</span>(resolve,  <span class="hljs-string">&#x27;image/png&#x27;</span>)<br>);<br><br><span class="hljs-keyword">let</span> response = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(<span class="hljs-string">&#x27;/article/fetch/post/image&#x27;</span>, &#123;<br>  <span class="hljs-attr">method</span>:  <span class="hljs-string">&#x27;POST&#x27;</span>,<br>  <span class="hljs-attr">body</span>: blob<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="2-2-3-option-API"><a href="#2-2-3-option-API" class="headerlink" title="2.2.3. option API"></a>2.2.3. option API</h3><p>fetch()第二个参数的完整 API 如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> response = <span class="hljs-title function_">fetch</span>(url, &#123;<br>  <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;GET&quot;</span>,<br>  <span class="hljs-attr">headers</span>: &#123;<br>    <span class="hljs-string">&quot;Content-Type&quot;</span>: <span class="hljs-string">&quot;text/plain;charset=UTF-8&quot;</span><br>  &#125;,<br>  <span class="hljs-attr">body</span>: <span class="hljs-literal">undefined</span>,<br>  <span class="hljs-attr">referrer</span>: <span class="hljs-string">&quot;about:client&quot;</span>,<br>  <span class="hljs-attr">referrerPolicy</span>: <span class="hljs-string">&quot;no-referrer-when-downgrade&quot;</span>,<br>  <span class="hljs-attr">mode</span>: <span class="hljs-string">&quot;cors&quot;</span>, <br>  <span class="hljs-attr">credentials</span>: <span class="hljs-string">&quot;same-origin&quot;</span>,<br>  <span class="hljs-attr">cache</span>: <span class="hljs-string">&quot;default&quot;</span>,<br>  <span class="hljs-attr">redirect</span>: <span class="hljs-string">&quot;follow&quot;</span>,<br>  <span class="hljs-attr">integrity</span>: <span class="hljs-string">&quot;&quot;</span>,<br>  <span class="hljs-attr">keepalive</span>: <span class="hljs-literal">false</span>,<br>  <span class="hljs-attr">signal</span>: <span class="hljs-literal">undefined</span><br>&#125;);<br></code></pre></td></tr></table></figure><p>fetch()请求的底层用的是 <a href="https://developer.mozilla.org/en-US/docs/Web/API/Request/Request">Request() 对象</a>的接口，参数完全一样，因此上面的 API 也是Request()的 API。</p><h4 id="2-2-3-1-cache"><a href="#2-2-3-1-cache" class="headerlink" title="2.2.3.1. cache"></a>2.2.3.1. cache</h4><p>cache属性指定如何处理缓存。可能的取值如下：</p><ul><li>default：默认值，先在缓存里面寻找匹配的请求；</li><li>no-store：直接请求远程服务器，并且不更新缓存；</li><li>reload：直接请求远程服务器，并且更新缓存；</li><li>no-cache：将服务器资源跟本地缓存进行比较，有新的版本才使用服务器资源，否则使用缓存；</li><li>force-cache：缓存优先，只有不存在缓存的情况下，才请求远程服务器；</li><li>only-if-cached：只检查缓存，如果缓存里面不存在，将返回504错误；</li></ul><h4 id="2-2-3-2-mode"><a href="#2-2-3-2-mode" class="headerlink" title="2.2.3.2. mode"></a>2.2.3.2. mode</h4><p>mode属性指定请求的模式。可能的取值如下：</p><ul><li>cors：默认值，允许跨域请求；</li><li>same-origin：只允许同源请求；</li><li>no-cors：请求方法只限于 GET、POST 和 HEAD，并且只能使用有限的几个简单标头，不能添加跨域的复杂标头，相当于提交表单所能发出的请求；</li></ul><h4 id="2-2-3-3-credentials"><a href="#2-2-3-3-credentials" class="headerlink" title="2.2.3.3. credentials"></a>2.2.3.3. credentials</h4><p>credentials属性指定是否发送 Cookie。可能的取值如下：</p><ul><li>same-origin：默认值，同源请求时发送 Cookie，跨域请求时不发送；</li><li>include：不管同源请求，还是跨域请求，一律发送 Cookie；</li><li>omit：一律不发送；</li></ul><p>跨域请求发送 Cookie，需要将credentials属性设为include。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">fetch</span>(<span class="hljs-string">&#x27;http://another.com&#x27;</span>, &#123;<br>  <span class="hljs-attr">credentials</span>: <span class="hljs-string">&quot;include&quot;</span><br>&#125;);<br></code></pre></td></tr></table></figure><h4 id="2-2-3-4-signal"><a href="#2-2-3-4-signal" class="headerlink" title="2.2.3.4. signal"></a>2.2.3.4. signal</h4><p>signal属性指定一个 <code>AbortSignal</code> 实例，用于取消fetch()请求。</p><h4 id="2-2-3-5-keepalive"><a href="#2-2-3-5-keepalive" class="headerlink" title="2.2.3.5. keepalive"></a>2.2.3.5. keepalive</h4><p>keepalive属性用于页面卸载时，告诉浏览器在后台保持连接，继续发送数据。<br>一个典型的场景就是，用户离开网页时，脚本向服务器提交一些用户行为的统计信息。这时，如果不用keepalive属性，数据可能无法发送，因为浏览器已经把页面卸载了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">window</span>.<span class="hljs-property">onunload</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-title function_">fetch</span>(<span class="hljs-string">&#x27;/analytics&#x27;</span>, &#123;<br>    <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;POST&#x27;</span>,<br>    <span class="hljs-attr">body</span>: <span class="hljs-string">&quot;statistics&quot;</span>,<br>    <span class="hljs-attr">keepalive</span>: <span class="hljs-literal">true</span><br>  &#125;);<br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="2-2-3-6-redirect"><a href="#2-2-3-6-redirect" class="headerlink" title="2.2.3.6. redirect"></a>2.2.3.6. redirect</h4><p>redirect属性指定 HTTP 跳转的处理方法。可能的取值如下：</p><ul><li>follow：默认值，fetch()跟随 HTTP 跳转；</li><li>error：如果发生跳转，fetch()就报错；</li><li>manual：fetch()不跟随 HTTP 跳转，但是response.url属性会指向新的 URL，response.redirected属性会变为true，由开发者自己决定后续如何处理跳转；</li></ul><h4 id="2-2-3-7-integrity"><a href="#2-2-3-7-integrity" class="headerlink" title="2.2.3.7. integrity"></a>2.2.3.7. integrity</h4><p>integrity属性指定一个哈希值，用于检查 HTTP 回应传回的数据是否等于这个预先设定的哈希值。<br>比如，下载文件时，检查文件的 SHA-256 哈希值是否相符，确保没有被篡改。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">fetch</span>(<span class="hljs-string">&#x27;http://site.com/file&#x27;</span>, &#123;<br>  <span class="hljs-attr">integrity</span>: <span class="hljs-string">&#x27;sha256-abcdef&#x27;</span><br>&#125;);<br></code></pre></td></tr></table></figure><h4 id="2-2-3-8-referrer"><a href="#2-2-3-8-referrer" class="headerlink" title="2.2.3.8. referrer"></a>2.2.3.8. referrer</h4><p>referrer属性用于设定fetch()请求的referer标头。<br>这个属性可以为任意字符串，也可以设为空字符串（即不发送referer标头）。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">fetch</span>(<span class="hljs-string">&#x27;/page&#x27;</span>, &#123;<br>  <span class="hljs-attr">referrer</span>: <span class="hljs-string">&#x27;&#x27;</span><br>&#125;);<br></code></pre></td></tr></table></figure><h4 id="2-2-3-9-referrerPolicy"><a href="#2-2-3-9-referrerPolicy" class="headerlink" title="2.2.3.9. referrerPolicy"></a>2.2.3.9. referrerPolicy</h4><p>referrerPolicy属性用于设定Referer标头的规则。可能的取值如下：</p><ul><li><code>no-referrer-when-downgrade</code>：默认值，总是发送Referer标头，除非从 HTTPS 页面请求 HTTP 资源时不发送；</li><li><code>no-referrer</code>：不发送Referer标头；</li><li><code>origin</code>：Referer标头只包含域名，不包含完整的路径；</li><li><code>origin-when-cross-origin</code>：同源请求Referer标头包含完整的路径，跨域请求只包含域名；</li><li><code>same-origin</code>：跨域请求不发送Referer，同源请求发送；</li><li><code>strict-origin</code>：Referer标头只包含域名，HTTPS 页面请求 HTTP 资源时不发送Referer标头；</li><li><code>strict-origin-when-cross-origin</code>：同源请求时Referer标头包含完整路径，跨域请求时只包含域名，HTTPS 页面请求 HTTP 资源时不发送该标头；</li><li><code>unsafe-url</code>：不管什么情况，总是发送Referer标头；</li></ul><h3 id="2-2-4-fetch-cancel"><a href="#2-2-4-fetch-cancel" class="headerlink" title="2.2.4. fetch cancel"></a>2.2.4. fetch cancel</h3><p>fetch()请求发送以后，如果中途想要取消，需要使用<code>AbortController</code>对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><br><span class="hljs-keyword">let</span> controller = <span class="hljs-keyword">new</span> <span class="hljs-title class_">AbortController</span>();<br><span class="hljs-keyword">let</span> signal = controller.<span class="hljs-property">signal</span>;<br><br><span class="hljs-title function_">fetch</span>(url, &#123;<br>  <span class="hljs-attr">signal</span>: controller.<span class="hljs-property">signal</span><br>&#125;);<br><br>signal.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;abort&#x27;</span>,<br>  <span class="hljs-function">() =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;abort!&#x27;</span>)<br>);<br><br>controller.<span class="hljs-title function_">abort</span>(); <span class="hljs-comment">// 取消</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(signal.<span class="hljs-property">aborted</span>); <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><p>上面示例中，首先新建 AbortController 实例，然后发送fetch()请求，配置对象的signal属性必须指定接收 <code>AbortController</code> 实例发送的信号<code>controller.signal</code>。<br><code>controller.abort()</code>方法用于发出取消信号。这时会触发abort事件，这个事件可以监听，也可以通过<code>controller.signal.aborted</code>属性判断取消信号是否已经发出。<br>下面是一个1秒后自动取消请求的例子。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> controller = <span class="hljs-keyword">new</span> <span class="hljs-title class_">AbortController</span>();<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> controller.<span class="hljs-title function_">abort</span>(), <span class="hljs-number">1000</span>);<br><br><span class="hljs-keyword">try</span> &#123;<br>  <span class="hljs-keyword">let</span> response = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(<span class="hljs-string">&#x27;/long-operation&#x27;</span>, &#123;<br>    <span class="hljs-attr">signal</span>: controller.<span class="hljs-property">signal</span><br>  &#125;);<br>&#125; <span class="hljs-keyword">catch</span>(err) &#123;<br>  <span class="hljs-keyword">if</span> (err.<span class="hljs-property">name</span> == <span class="hljs-string">&#x27;AbortError&#x27;</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Aborted!&#x27;</span>);<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">throw</span> err;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-2-5-测试"><a href="#2-2-5-测试" class="headerlink" title="2.2.5. 测试"></a>2.2.5. 测试</h3><p>针对<code>json-server</code>服务，只需要执行：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">fetch</span>(<span class="hljs-string">&#x27;http://localhost:3000/posts&#x27;</span>)<br>  .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> res.<span class="hljs-title function_">json</span>())<br>  .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data);<br>  &#125;)<br>  .<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err);<br>  &#125;);<br></code></pre></td></tr></table></figure><blockquote><p>有兴趣的同学可以参考：<a href="https://github.com/github/fetch">fetch polyfill</a></p></blockquote><h2 id="2-3-axios"><a href="#2-3-axios" class="headerlink" title="2.3. axios"></a>2.3. axios</h2><blockquote><p><a href="https://github.com/axios/axios">github地址</a><br><a href="https://axios-http.com/">官网地址</a></p></blockquote><p>axios是一个用于网络请求的第三方库，是一个基于Promise 用于浏览器和 nodejs 的 HTTP 客户端，它本身具有以下特征：</p><ul><li>从浏览器中创建 <code>XMLHttpRequest</code>；</li><li>从 node.js 发出 http 请求；</li><li>支持 Promise API；</li><li>拦截请求和响应；</li><li>转换请求和响应数据；</li><li>取消请求；</li><li>自动转换JSON数据；</li><li>客户端支持防止CSRF&#x2F;XSRF；</li></ul><h3 id="2-3-1-基础使用"><a href="#2-3-1-基础使用" class="headerlink" title="2.3.1. 基础使用"></a>2.3.1. 基础使用</h3><p>Axios 提供了两种不同的形式来发送 HTTP 请求：</p><h4 id="2-3-1-1-方法"><a href="#2-3-1-1-方法" class="headerlink" title="2.3.1.1. 方法"></a>2.3.1.1. 方法</h4><p><code>axios(config)</code> 方法接收一个对象，这个对象包含了一些对请求的配置， axios 会根据这些配置来发送对应的 HTTP 请求<br>最基本的配置项应该包括：</p><ol><li>method 请求的方法（可选值： get , post 等）；</li><li>url 请求的地址 （必须项）；</li><li>data 请求发送的数据（post等请求需要）；<blockquote><p>默认的请求方法是get所以如果是get请求可以不设置method</p></blockquote></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 发送 POST 请求</span><br><span class="hljs-title function_">axios</span>(&#123;<br>  <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;post&#x27;</span>,<br>  <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;/user/12345&#x27;</span>,<br>  <span class="hljs-attr">data</span>: &#123;<br>    <span class="hljs-attr">firstName</span>: <span class="hljs-string">&#x27;Fred&#x27;</span>,<br>    <span class="hljs-attr">lastName</span>: <span class="hljs-string">&#x27;Flintstone&#x27;</span><br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p>请求响应的处理在 then 和 catch 回调中，请求正常会进入 then ，请求异常则会进 catch</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 发送 POST 请求</span><br><span class="hljs-title function_">axios</span>(&#123;<br>  <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;post&#x27;</span>,<br>  <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;/user/12345&#x27;</span>,<br>  <span class="hljs-attr">data</span>: &#123;<br>    <span class="hljs-attr">firstName</span>: <span class="hljs-string">&#x27;Fred&#x27;</span>,<br>    <span class="hljs-attr">lastName</span>: <span class="hljs-string">&#x27;Flintstone&#x27;</span><br>  &#125;<br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>    consloe.<span class="hljs-title function_">log</span>(res)<br>&#125;).<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err)<br>&#125;)<br><br><span class="hljs-comment">// 发送 GET 请求（默认的方法）</span><br><span class="hljs-title function_">axios</span>(<span class="hljs-string">&#x27;/user/12345&#x27;</span>);<br></code></pre></td></tr></table></figure><h4 id="2-3-1-2-请求别名"><a href="#2-3-1-2-请求别名" class="headerlink" title="2.3.1.2. 请求别名"></a>2.3.1.2. 请求别名</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 发送GET请求</span><br>axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/user?ID=12345&#x27;</span>).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">response</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(response);<br>&#125;).<span class="hljs-title function_">catch</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">error</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(error);<br>&#125;);<br><br><span class="hljs-comment">// 发送POST请求</span><br>发送post请求<br>axios.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/user&#x27;</span>, &#123;<br>  <span class="hljs-attr">firstName</span>: <span class="hljs-string">&#x27;Fred&#x27;</span>,<br>  <span class="hljs-attr">lastName</span>: <span class="hljs-string">&#x27;Flintstone&#x27;</span><br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">response</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(response);<br>&#125;).<span class="hljs-title function_">catch</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">error</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(error);<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="2-3-2-响应数据"><a href="#2-3-2-响应数据" class="headerlink" title="2.3.2. 响应数据"></a>2.3.2. 响应数据</h3><p>其中的 data 是后端返回的数据，一般只需要关注 <code>response</code> 中的 <code>data</code> 字段就行</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&#123;<br>  <span class="hljs-comment">// `data` 由服务器提供的响应</span><br>  <span class="hljs-attr">data</span>: &#123;&#125;,<br>  <span class="hljs-comment">// `status` 来自服务器响应的 HTTP 状态码</span><br>  <span class="hljs-attr">status</span>: <span class="hljs-number">200</span>,<br>  <span class="hljs-comment">// `statusText` 来自服务器响应的 HTTP 状态信息</span><br>  <span class="hljs-attr">statusText</span>: <span class="hljs-string">&#x27;OK&#x27;</span>,<br>  <span class="hljs-comment">// `headers` 服务器响应的头</span><br>  <span class="hljs-attr">headers</span>: &#123;&#125;,<br>   <span class="hljs-comment">// `config` 是为请求提供的配置信息</span><br>  <span class="hljs-attr">config</span>: &#123;&#125;,<br> <span class="hljs-comment">// &#x27;request&#x27;</span><br>  <span class="hljs-comment">// `request` is the request that generated this response</span><br>  <span class="hljs-comment">// It is the last ClientRequest instance in node.js (in redirects)</span><br>  <span class="hljs-comment">// and an XMLHttpRequest instance the browser</span><br>  <span class="hljs-attr">request</span>: &#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-3-3-创建实例"><a href="#2-3-3-创建实例" class="headerlink" title="2.3.3. 创建实例"></a>2.3.3. 创建实例</h3><p>可以使用自定义配置新建一个 axios 实例 <code>axios.create([config])</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> instance = axios.<span class="hljs-title function_">create</span>(&#123;<br>  <span class="hljs-attr">baseURL</span>: <span class="hljs-string">&#x27;https://some-domain.com/api/&#x27;</span>,<br>  <span class="hljs-attr">timeout</span>: <span class="hljs-number">1000</span>,<br>  <span class="hljs-attr">headers</span>: &#123;<span class="hljs-string">&#x27;X-Custom-Header&#x27;</span>: <span class="hljs-string">&#x27;foobar&#x27;</span>&#125;<br>&#125;);<br><br></code></pre></td></tr></table></figure><p>创建的实例中的 axios() api 改为了 request() api，使用方式是一样的，其他如请求别名等函数，都没有改变<br>以下是实例所拥有的方法</p><ul><li>request(config)；</li><li>get(url[, config])；</li><li>delete(url[, config])；</li><li>head(url[, config])；</li><li>options(url[, config])；</li><li>post(url[, data[, config]])；</li><li>put(url[, data[, config]])；</li><li>patch(url[, data[, config]])；</li></ul><p>axios会把这些 方法中的config 会和创建实例时指定的 config 合并到一起使用</p><h3 id="2-3-4-拦截器"><a href="#2-3-4-拦截器" class="headerlink" title="2.3.4. 拦截器"></a>2.3.4. 拦截器</h3><ul><li><code>axios.interceptors.request</code> 请求拦截器</li><li><code>axios.interceptors.response</code> 响应拦截器<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><br><span class="hljs-comment">// 添加请求拦截器</span><br>axios.<span class="hljs-property">interceptors</span>.<span class="hljs-property">request</span>.<span class="hljs-title function_">use</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">config</span>) &#123;<br>  <span class="hljs-comment">// 在发送请求之前做些什么</span><br>  config.<span class="hljs-property">header</span>[<span class="hljs-string">&quot;Token&quot;</span>] = <span class="hljs-string">&quot;xxxx&quot;</span><br>  <span class="hljs-keyword">return</span> config;<br>&#125;, <span class="hljs-keyword">function</span> (<span class="hljs-params">error</span>) &#123;<br>  <span class="hljs-comment">// 对请求错误做些什么</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>(error);<br>&#125;);<br><br><span class="hljs-comment">// 添加响应拦截器</span><br>axios.<span class="hljs-property">interceptors</span>.<span class="hljs-property">response</span>.<span class="hljs-title function_">use</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">response</span>) &#123;<br>  <span class="hljs-comment">// 对响应数据做点什么</span><br>  <span class="hljs-keyword">if</span> (response.<span class="hljs-property">status</span> === <span class="hljs-number">200</span>)&#123;<br>    <span class="hljs-keyword">return</span> response.<span class="hljs-property">data</span><br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;error&#x27;</span>))<br>  &#125;<br>&#125;, <span class="hljs-keyword">function</span> (<span class="hljs-params">error</span>) &#123;<br>  <span class="hljs-comment">// 对响应错误做点什么</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>(error);<br>&#125;);<br></code></pre></td></tr></table></figure>如果想要取消拦截器，可以通过使用一个变量来接收设置拦截器时返回的实例，然后使用 eject 来取消拦截器<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> myInterceptor = axios.<span class="hljs-property">interceptors</span>.<span class="hljs-property">request</span>.<span class="hljs-title function_">use</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<span class="hljs-comment">/*...*/</span>&#125;);<br>axios.<span class="hljs-property">interceptors</span>.<span class="hljs-property">request</span>.<span class="hljs-title function_">eject</span>(myInterceptor);<br></code></pre></td></tr></table></figure></li></ul><h3 id="2-3-5-完整的请求配置"><a href="#2-3-5-完整的请求配置" class="headerlink" title="2.3.5. 完整的请求配置"></a>2.3.5. 完整的请求配置</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&#123;<br>   <span class="hljs-comment">// `url` 是用于请求的服务器 URL</span><br>  <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;/user&#x27;</span>,<br>  <span class="hljs-comment">// `method` 是创建请求时使用的方法</span><br>  <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;get&#x27;</span>, <span class="hljs-comment">// default</span><br>  <span class="hljs-comment">// `baseURL` 将自动加在 `url` 前面，除非 `url` 是一个绝对 URL。</span><br>  <span class="hljs-comment">// 它可以通过设置一个 `baseURL` 便于为 axios 实例的方法传递相对 URL</span><br>  <span class="hljs-attr">baseURL</span>: <span class="hljs-string">&#x27;https://some-domain.com/api/&#x27;</span>,<br>  <span class="hljs-comment">// `transformRequest` 允许在向服务器发送前，修改请求数据</span><br>  <span class="hljs-comment">// 只能用在 &#x27;PUT&#x27;, &#x27;POST&#x27; 和 &#x27;PATCH&#x27; 这几个请求方法</span><br>  <span class="hljs-comment">// 后面数组中的函数必须返回一个字符串，或 ArrayBuffer，或 Stream</span><br>  <span class="hljs-attr">transformRequest</span>: [<span class="hljs-keyword">function</span> (<span class="hljs-params">data, headers</span>) &#123;<br>    <span class="hljs-comment">// 对 data 进行任意转换处理</span><br>    <span class="hljs-keyword">return</span> data;<br>  &#125;],<br>  <span class="hljs-comment">// `transformResponse` 在传递给 then/catch 前，允许修改响应数据</span><br>  <span class="hljs-attr">transformResponse</span>: [<span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) &#123;<br>    <span class="hljs-comment">// 对 data 进行任意转换处理</span><br>    <span class="hljs-keyword">return</span> data;<br>  &#125;],<br>  <span class="hljs-comment">// `headers` 是即将被发送的自定义请求头</span><br>  <span class="hljs-attr">headers</span>: &#123;<span class="hljs-string">&#x27;X-Requested-With&#x27;</span>: <span class="hljs-string">&#x27;XMLHttpRequest&#x27;</span>&#125;,<br>  <span class="hljs-comment">// `params` 是即将与请求一起发送的 URL 参数</span><br>  <span class="hljs-comment">// 必须是一个无格式对象(plain object)或 URLSearchParams 对象</span><br>  <span class="hljs-attr">params</span>: &#123;<br>    <span class="hljs-attr">ID</span>: <span class="hljs-number">12345</span><br>  &#125;,<br>   <span class="hljs-comment">// `paramsSerializer` 是一个负责 `params` 序列化的函数</span><br>  <span class="hljs-comment">// (e.g. https://www.npmjs.com/package/qs, http://api.jquery.com/jquery.param/)</span><br>  <span class="hljs-attr">paramsSerializer</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">params</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Qs</span>.<span class="hljs-title function_">stringify</span>(params, &#123;<span class="hljs-attr">arrayFormat</span>: <span class="hljs-string">&#x27;brackets&#x27;</span>&#125;)<br>  &#125;,<br>  <span class="hljs-comment">// `data` 是作为请求主体被发送的数据</span><br>  <span class="hljs-comment">// 只适用于这些请求方法 &#x27;PUT&#x27;, &#x27;POST&#x27;, 和 &#x27;PATCH&#x27;</span><br>  <span class="hljs-comment">// 在没有设置 `transformRequest` 时，必须是以下类型之一：</span><br>  <span class="hljs-comment">// - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams</span><br>  <span class="hljs-comment">// - 浏览器专属：FormData, File, Blob</span><br>  <span class="hljs-comment">// - Node 专属： Stream</span><br>  <span class="hljs-attr">data</span>: &#123;<br>    <span class="hljs-attr">firstName</span>: <span class="hljs-string">&#x27;Fred&#x27;</span><br>  &#125;,<br>  <span class="hljs-comment">// `timeout` 指定请求超时的毫秒数(0 表示无超时时间)</span><br>  <span class="hljs-comment">// 如果请求话费了超过 `timeout` 的时间，请求将被中断</span><br>  <span class="hljs-attr">timeout</span>: <span class="hljs-number">1000</span>,<br>   <span class="hljs-comment">// `withCredentials` 表示跨域请求时是否需要使用凭证</span><br>  <span class="hljs-attr">withCredentials</span>: <span class="hljs-literal">false</span>, <span class="hljs-comment">// default</span><br>  <span class="hljs-comment">// `adapter` 允许自定义处理请求，以使测试更轻松</span><br>  <span class="hljs-comment">// 返回一个 promise 并应用一个有效的响应 (查阅 [response docs](#response-api)).</span><br>  <span class="hljs-attr">adapter</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">config</span>) &#123;<br>    <span class="hljs-comment">/* ... */</span><br>  &#125;,<br> <span class="hljs-comment">// `auth` 表示应该使用 HTTP 基础验证，并提供凭据</span><br>  <span class="hljs-comment">// 这将设置一个 `Authorization` 头，覆写掉现有的任意使用 `headers` 设置的自定义 `Authorization`头</span><br>  <span class="hljs-attr">auth</span>: &#123;<br>    <span class="hljs-attr">username</span>: <span class="hljs-string">&#x27;janedoe&#x27;</span>,<br>    <span class="hljs-attr">password</span>: <span class="hljs-string">&#x27;s00pers3cret&#x27;</span><br>  &#125;,<br>   <span class="hljs-comment">// `responseType` 表示服务器响应的数据类型，可以是 &#x27;arraybuffer&#x27;, &#x27;blob&#x27;, &#x27;document&#x27;, &#x27;json&#x27;, &#x27;text&#x27;, &#x27;stream&#x27;</span><br>  <span class="hljs-attr">responseType</span>: <span class="hljs-string">&#x27;json&#x27;</span>, <span class="hljs-comment">// default</span><br>  <span class="hljs-comment">// `responseEncoding` indicates encoding to use for decoding responses</span><br>  <span class="hljs-comment">// Note: Ignored for `responseType` of &#x27;stream&#x27; or client-side requests</span><br>  <span class="hljs-attr">responseEncoding</span>: <span class="hljs-string">&#x27;utf8&#x27;</span>, <span class="hljs-comment">// default</span><br>   <span class="hljs-comment">// `xsrfCookieName` 是用作 xsrf token 的值的cookie的名称</span><br>  <span class="hljs-attr">xsrfCookieName</span>: <span class="hljs-string">&#x27;XSRF-TOKEN&#x27;</span>, <span class="hljs-comment">// default</span><br>  <span class="hljs-comment">// `xsrfHeaderName` is the name of the http header that carries the xsrf token value</span><br>  <span class="hljs-attr">xsrfHeaderName</span>: <span class="hljs-string">&#x27;X-XSRF-TOKEN&#x27;</span>, <span class="hljs-comment">// default</span><br>   <span class="hljs-comment">// `onUploadProgress` 允许为上传处理进度事件</span><br>  <span class="hljs-attr">onUploadProgress</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">progressEvent</span>) &#123;<br>    <span class="hljs-comment">// Do whatever you want with the native progress event</span><br>  &#125;,<br>  <span class="hljs-comment">// `onDownloadProgress` 允许为下载处理进度事件</span><br>  <span class="hljs-attr">onDownloadProgress</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">progressEvent</span>) &#123;<br>    <span class="hljs-comment">// 对原生进度事件的处理</span><br>  &#125;,<br>   <span class="hljs-comment">// `maxContentLength` 定义允许的响应内容的最大尺寸</span><br>  <span class="hljs-attr">maxContentLength</span>: <span class="hljs-number">2000</span>,<br>  <span class="hljs-comment">// `validateStatus` 定义对于给定的HTTP 响应状态码是 resolve 或 reject  promise 。如果 `validateStatus` 返回 `true` (或者设置为 `null` 或 `undefined`)，promise 将被 resolve; 否则，promise 将被 rejecte</span><br>  <span class="hljs-attr">validateStatus</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">status</span>) &#123;<br>    <span class="hljs-keyword">return</span> status &gt;= <span class="hljs-number">200</span> &amp;&amp; status &lt; <span class="hljs-number">300</span>; <span class="hljs-comment">// default</span><br>  &#125;,<br>  <span class="hljs-comment">// `maxRedirects` 定义在 node.js 中 follow 的最大重定向数目</span><br>  <span class="hljs-comment">// 如果设置为0，将不会 follow 任何重定向</span><br>  <span class="hljs-attr">maxRedirects</span>: <span class="hljs-number">5</span>, <span class="hljs-comment">// default</span><br>  <span class="hljs-comment">// `socketPath` defines a UNIX Socket to be used in node.js.</span><br>  <span class="hljs-comment">// e.g. &#x27;/var/run/docker.sock&#x27; to send requests to the docker daemon.</span><br>  <span class="hljs-comment">// Only either `socketPath` or `proxy` can be specified.</span><br>  <span class="hljs-comment">// If both are specified, `socketPath` is used.</span><br>  <span class="hljs-attr">socketPath</span>: <span class="hljs-literal">null</span>, <span class="hljs-comment">// default</span><br>  <span class="hljs-comment">// `httpAgent` 和 `httpsAgent` 分别在 node.js 中用于定义在执行 http 和 https 时使用的自定义代理。允许像这样配置选项：</span><br>  <span class="hljs-comment">// `keepAlive` 默认没有启用</span><br>  <span class="hljs-attr">httpAgent</span>: <span class="hljs-keyword">new</span> http.<span class="hljs-title class_">Agent</span>(&#123; <span class="hljs-attr">keepAlive</span>: <span class="hljs-literal">true</span> &#125;),<br>  <span class="hljs-attr">httpsAgent</span>: <span class="hljs-keyword">new</span> https.<span class="hljs-title class_">Agent</span>(&#123; <span class="hljs-attr">keepAlive</span>: <span class="hljs-literal">true</span> &#125;),<br>  <span class="hljs-comment">// &#x27;proxy&#x27; 定义代理服务器的主机名称和端口</span><br>  <span class="hljs-comment">// `auth` 表示 HTTP 基础验证应当用于连接代理，并提供凭据</span><br>  <span class="hljs-comment">// 这将会设置一个 `Proxy-Authorization` 头，覆写掉已有的通过使用 `header` 设置的自定义 `Proxy-Authorization` 头。</span><br>  <span class="hljs-attr">proxy</span>: &#123;<br>    <span class="hljs-attr">host</span>: <span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<br>    <span class="hljs-attr">port</span>: <span class="hljs-number">9000</span>,<br>    <span class="hljs-attr">auth</span>: &#123;<br>      <span class="hljs-attr">username</span>: <span class="hljs-string">&#x27;mikeymike&#x27;</span>,<br>      <span class="hljs-attr">password</span>: <span class="hljs-string">&#x27;rapunz3l&#x27;</span><br>    &#125;<br>  &#125;,<br>  <span class="hljs-comment">// `cancelToken` 指定用于取消请求的 cancel token</span><br>  <span class="hljs-comment">// （查看后面的 Cancellation 这节了解更多）</span><br>  <span class="hljs-attr">cancelToken</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">CancelToken</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">cancel</span>) &#123;<br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-3-6-测试"><a href="#2-3-6-测试" class="headerlink" title="2.3.6. 测试"></a>2.3.6. 测试</h3><p>针对<code>json-server</code>服务，只需要执行：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> axios = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;axios&#x27;</span>);<br><br>axios<br>  .<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;http://localhost:3000/posts&#x27;</span>)<br>  .<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">response</span>) &#123;<br>    <span class="hljs-comment">// handle success</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(response);<br>  &#125;)<br>  .<span class="hljs-title function_">catch</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">error</span>) &#123;<br>    <span class="hljs-comment">// handle error</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(error);<br>  &#125;)<br>  .<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// always executed</span><br>  &#125;);<br><br></code></pre></td></tr></table></figure><h2 id="2-4-总结"><a href="#2-4-总结" class="headerlink" title="2.4. 总结"></a>2.4. 总结</h2><ol><li>Ajax 是<code>Async Javascript And Xml</code>的简称，它是原生JavaScript的一种请求方案，利用 XMLHttpRequest 进行异步请求数据，实现无感刷新数据；</li><li>Fetch 是 ES6 新推出的一套异步请求方案，它天生自带 Promise，同时也是原生的，如果在较小项目中为了项目大小着想和兼容性不是那么高的前提下不妨可以用它来进行异步请求也是不错的；</li><li>Axios 是基于 Ajax 和 Promise 封装的一个库，可以利用Promise来更好的管控请求回调嵌套造成的回调地狱；</li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>typescript</title>
    <link href="/2023/07/17/typescript/"/>
    <url>/2023/07/17/typescript/</url>
    
    <content type="html"><![CDATA[<h2 id="类型定义"><a href="#类型定义" class="headerlink" title="类型定义"></a>类型定义</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">const</span> <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span> = <span class="hljs-string">&#x27;小明&#x27;</span> <span class="hljs-comment">//字符串</span><br><br><span class="hljs-keyword">const</span> <span class="hljs-attr">age</span>:<span class="hljs-built_in">number</span> = <span class="hljs-number">18</span>; <span class="hljs-comment">//数字</span><br><br><span class="hljs-keyword">const</span> <span class="hljs-attr">isDone</span>: <span class="hljs-built_in">boolean</span> = <span class="hljs-literal">false</span>; <span class="hljs-comment">//布尔值</span><br><br><span class="hljs-keyword">const</span> <span class="hljs-attr">list</span>:<span class="hljs-built_in">number</span>[] = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>] 或 <span class="hljs-keyword">const</span> <span class="hljs-attr">list1</span>: <span class="hljs-title class_">Array</span>&lt;<span class="hljs-built_in">number</span>&gt; = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]; <span class="hljs-comment">//数组 </span><br><br><span class="hljs-keyword">const</span> x : [<span class="hljs-built_in">string</span>,<span class="hljs-built_in">number</span>] = [<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-number">2</span>]; <span class="hljs-comment">//元组, 元组表示已知元素类型和数量的数组</span><br><br><span class="hljs-keyword">const</span> <span class="hljs-attr">any1</span>: <span class="hljs-built_in">any</span> = <span class="hljs-string">&#x27;1&#x27;</span> <span class="hljs-comment">//any可以表示任何类型</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">warnUser</span>(<span class="hljs-params"></span>) :<span class="hljs-built_in">void</span> &#123;<br>  <br>&#125; <span class="hljs-comment">//void表示没有任何类型，当一个函数没有返回值时，你通常会见到其返回值类型是 void</span><br><br><span class="hljs-keyword">let</span> <span class="hljs-attr">u</span>: <span class="hljs-literal">undefined</span> = <span class="hljs-literal">undefined</span>; <br><span class="hljs-keyword">let</span> <span class="hljs-attr">n</span>: <span class="hljs-literal">null</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-literal">undefined</span>和<span class="hljs-literal">null</span>两者各自有自己的类型分别叫做<span class="hljs-literal">undefined</span>和<span class="hljs-literal">null</span>。 和 <span class="hljs-built_in">void</span>相似，<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">error</span>(<span class="hljs-params">message: <span class="hljs-built_in">string</span></span>): <span class="hljs-built_in">never</span> &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(message);<br>&#125;  <span class="hljs-built_in">never</span>类型表示的是那些永不存在的值的类型<br><br><br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Color</span> &#123; <span class="hljs-title class_">Red</span>, <span class="hljs-title class_">Green</span>, <span class="hljs-title class_">Blue</span>, <span class="hljs-title class_">Alpha</span>&#125; <span class="hljs-comment">//枚举</span><br></code></pre></td></tr></table></figure><h2 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a>类型断言</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs typescript">“尖括号”语法：<br><span class="hljs-keyword">let</span> <span class="hljs-attr">someValue</span>: <span class="hljs-built_in">any</span> = <span class="hljs-string">&quot;this is a string&quot;</span>;<br><br><span class="hljs-keyword">let</span> <span class="hljs-attr">strLength</span>: <span class="hljs-built_in">number</span> = (&lt;<span class="hljs-built_in">string</span>&gt;someValue).<span class="hljs-property">length</span>;<br><br><span class="hljs-keyword">as</span>语法：<br><span class="hljs-keyword">let</span> <span class="hljs-attr">someValue</span>: <span class="hljs-built_in">any</span> = <span class="hljs-string">&quot;this is a string&quot;</span>;<br><br><span class="hljs-keyword">let</span> <span class="hljs-attr">strLength</span>: <span class="hljs-built_in">number</span> = (someValue <span class="hljs-keyword">as</span> <span class="hljs-built_in">string</span>).<span class="hljs-property">length</span>;<br></code></pre></td></tr></table></figure><h2 id="类型联合和交叉"><a href="#类型联合和交叉" class="headerlink" title="类型联合和交叉"></a>类型联合和交叉</h2><p>类型联合用于指定一个值的类型可以是多个</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">let</span> <span class="hljs-attr">p1</span>: <span class="hljs-built_in">string</span> | <span class="hljs-built_in">number</span>;<br></code></pre></td></tr></table></figure><p>类型交叉指多个类型合并为一个类型</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">type</span> <span class="hljs-title class_">NameLikeProtocal</span> = &#123;<span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>&#125;;<br><span class="hljs-keyword">type</span> <span class="hljs-title class_">AgeLikeProtocal</span> = &#123;<span class="hljs-attr">age</span>:<span class="hljs-built_in">number</span>&#125;;<br><span class="hljs-keyword">type</span> <span class="hljs-title class_">SayLikeProtocal</span> = &#123;<span class="hljs-attr">say</span>: <span class="hljs-function">(<span class="hljs-params">msg:<span class="hljs-built_in">string</span></span>)=&gt;</span> <span class="hljs-built_in">string</span> &#125;<br><span class="hljs-keyword">type</span> <span class="hljs-title class_">PersonLikeProtocal</span> = <span class="hljs-title class_">NameLikeProtocal</span> &amp; <span class="hljs-title class_">AgeLikeProtocal</span> &amp; <span class="hljs-title class_">SayLikeProtocal</span>;<br><br><span class="hljs-comment">// 去掉age属性</span><br><span class="hljs-keyword">type</span> <span class="hljs-title class_">NoAgePerson</span> = <span class="hljs-title class_">Omit</span>&lt;<span class="hljs-title class_">PersonLikeProtocal</span>,<span class="hljs-string">&#x27;age&#x27;</span>&gt;<br><br><span class="hljs-keyword">const</span> <span class="hljs-attr">person</span>: <span class="hljs-title class_">PersonLikeProtocal</span> = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;per&#x27;</span>,<br>  <span class="hljs-attr">age</span>:<span class="hljs-number">18</span>,<br>  <span class="hljs-title function_">say</span>(<span class="hljs-attr">str</span>:<span class="hljs-built_in">string</span>):<span class="hljs-built_in">string</span>&#123;<br>     <span class="hljs-keyword">return</span> str<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-attr">person1</span>: <span class="hljs-title class_">NoAgePerson</span> = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;per&#x27;</span>,<br>    <span class="hljs-title function_">say</span>(<span class="hljs-attr">str</span>:<span class="hljs-built_in">string</span>):<span class="hljs-built_in">string</span>&#123;<br>     <span class="hljs-keyword">return</span> str<br>   &#125; <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="interface"><a href="#interface" class="headerlink" title="interface"></a>interface</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">//interface 主要用于定义对象和类的类型</span><br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">IPerons</span>  &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-built_in">number</span>,<br>    <span class="hljs-title function_">say</span>(<span class="hljs-attr">msg</span>:<span class="hljs-built_in">string</span>):<span class="hljs-built_in">string</span><br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IPerons</span> &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>;<br>    <span class="hljs-attr">age</span>: <span class="hljs-built_in">number</span>;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name:<span class="hljs-built_in">string</span>,age:<span class="hljs-built_in">number</span></span>)&#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age;<br>    &#125;<br>    <span class="hljs-title function_">say</span>(<span class="hljs-params">msg:<span class="hljs-built_in">string</span></span>)&#123;<br>        <span class="hljs-keyword">return</span> msg<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>泛型: 在一定地方给于自由，又给了一定的限制</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-keyword">interface</span> <span class="hljs-symbol">IPerons</span>&lt;<span class="hljs-symbol">T</span>,<span class="hljs-symbol">P</span>&gt;&#123;<br>    name: P,<br>    age: T,<br>    say(msg:P):P<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-symbol">Person</span>&lt;<span class="hljs-symbol">T,<span class="hljs-symbol">P</span></span>&gt; <span class="hljs-symbol">implements</span> <span class="hljs-symbol">IPerons</span>&lt;<span class="hljs-symbol">T,<span class="hljs-symbol">P</span></span>&gt; &#123;<br>    name: P;<br>    age: T;<br>    constructor(name:P,age:T)&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br>    say(msg:P)&#123;<br>        <span class="hljs-keyword">return</span> msg<br>    &#125;<br><br>&#125;<br><span class="hljs-keyword">const</span> p1 = new Person(<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;1&#x27;</span>);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>闭包</title>
    <link href="/2023/07/17/%E9%97%AD%E5%8C%85/"/>
    <url>/2023/07/17/%E9%97%AD%E5%8C%85/</url>
    
    <content type="html"><![CDATA[<h1 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h1><h3 id="闭包的概念"><a href="#闭包的概念" class="headerlink" title="闭包的概念"></a>闭包的概念</h3><p><strong>闭包</strong>是指一个函数能够访问并操作其创建时所在的词法作用域中的变量的能力。换句话说，闭包就是能够将变量保存到函数外部的一种机制。</p><p>闭包有很多应用场景，比如可以使用它来实现<strong>私有属性</strong>、<strong>缓存计算结果</strong>、<strong>模拟事件</strong>处理程序等。但是，闭包也有一些缺点，比如容易导致内存泄漏、难以维护等。因此，在使用闭包时需要注意这些缺点，并采取相应的措施来避免它们的出现。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs arcade">let age = <span class="hljs-number">18</span>;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">cat</span>(<span class="hljs-params"></span>)&#123;<br>    age++;<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(age);<span class="hljs-comment">// cat函数内输出age，该作用域没有，则向外层寻找，结果找到了，输出[19];</span><br>&#125;<br>cat();<span class="hljs-comment">//19</span><br></code></pre></td></tr></table></figure><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">function</span> <span class="hljs-title function_">person</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">var</span> age = <span class="hljs-number">18</span>;<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">cat</span>(<span class="hljs-params"></span>)&#123;<br>        age++;<br>        <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(age);<br>    &#125;<br>    <span class="hljs-keyword">return</span> cat;<br>&#125;<br>person();<span class="hljs-comment">// 19</span><br>person();<span class="hljs-comment">// 19</span><br></code></pre></td></tr></table></figure><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">function</span> <span class="hljs-title function_">person</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">var</span> age = <span class="hljs-number">18</span>;<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">cat</span>(<span class="hljs-params"></span>)&#123;<br>        age++;<br>        <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(age);<br>    &#125;<br>    <span class="hljs-keyword">return</span> cat;<br>&#125;<br><br><span class="hljs-keyword">var</span> per = person();<span class="hljs-comment">//per相当于函数cat</span><br>per();<span class="hljs-comment">// 19 即cat() 这样每次调用不在经过age的初始值，这样就可以一直增加了</span><br>per();<span class="hljs-comment">// 20</span><br>per();<span class="hljs-comment">// 21</span><br></code></pre></td></tr></table></figure><h3 id="闭包的使用场景"><a href="#闭包的使用场景" class="headerlink" title="闭包的使用场景"></a>闭包的使用场景</h3><p>闭包的使用场景很广泛，特别在函数式编程思想中，闭包的使用场景更多，我们列举一些具体的使用场景，包含：</p><ol><li>函数柯里化</li><li>单例模式处理、工厂模式处理</li><li>react hooks</li></ol><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">curry</span><span class="hljs-params">(fn)</span> &#123;<br>  <span class="hljs-keyword">const</span> arity = fn.length;<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">curried</span><span class="hljs-params">(<span class="hljs-rest_arg">...args</span>)</span> &#123;<br>    <span class="hljs-keyword">if</span> (args.length &gt;= arity) &#123;<br>      <span class="hljs-keyword">return</span> fn.apply(<span class="hljs-keyword">this</span>, args);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> <span class="hljs-params">(<span class="hljs-rest_arg">...moreArgs</span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> curried.apply(<span class="hljs-keyword">this</span>, args.concat(moreArgs));<br>      &#125;;<br>    &#125;<br>  &#125;;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span><span class="hljs-params">(a, b, c)</span> &#123;<br>  <span class="hljs-keyword">return</span> a + b + c;<br>&#125;<br><br><span class="hljs-keyword">const</span> curriedAdd = curry(add);<br>console.log(curriedAdd(<span class="hljs-number">1</span>)(<span class="hljs-number">2</span>)(<span class="hljs-number">3</span>)); <span class="hljs-comment">// 输出 6</span><br></code></pre></td></tr></table></figure><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">function</span> <span class="hljs-title function_">person</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">var</span> age = <span class="hljs-number">18</span>;<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">cat</span>(<span class="hljs-params"></span>)&#123;<br>        age++;<br>        <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(age);<br>    &#125;<br>    <span class="hljs-keyword">return</span> cat;<br>&#125;<br><br><span class="hljs-keyword">var</span> per = person();<span class="hljs-comment">//per相当于函数cat</span><br>per();<span class="hljs-comment">// 19 即cat() 这样每次调用不在经过age的初始值，这样就可以一直增加了</span><br>per();<span class="hljs-comment">// 20</span><br>per();<span class="hljs-comment">// 21</span><br></code></pre></td></tr></table></figure><p>Compose 函数</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">compose</span><span class="hljs-params">(<span class="hljs-rest_arg">...funcs</span>: Function[])</span> &#123;<br>  <span class="hljs-keyword">if</span> (funcs.length === <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-comment">// infer the argument type so it is usable in inference down the line</span><br>    <span class="hljs-keyword">return</span> &lt;T&gt;(arg: T) =&gt; arg<br>  &#125;<br><br>  <span class="hljs-keyword">if</span> (funcs.length === <span class="hljs-number">1</span>) &#123;<br>    <span class="hljs-keyword">return</span> funcs[<span class="hljs-number">0</span>]<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> funcs.reduce(<br>    (a, b) =&gt;<br>      (...args: any) =&gt;<br>        a(b(...args))<br>  )<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="避免内存泄漏"><a href="#避免内存泄漏" class="headerlink" title="避免内存泄漏"></a>避免内存泄漏</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">function</span> <span class="hljs-title function_">outer</span>(<span class="hljs-params"></span>) &#123;<br>  let a = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">inner</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(a);<br>    a = <span class="hljs-literal">null</span>; <span class="hljs-comment">// 手动清除外部变量</span><br>    inner = <span class="hljs-literal">null</span>; <span class="hljs-comment">// 手动清除内部函数</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在上面的例子中，我们在 inner 函数的最后手动将 a 变量和 inner 函数置为 null，以释放内存。</p><p>使用 IIFE：可以使用立即执行函数表达式（Immediately Invoked Function Expression，IIFE）来创建一个独立的作用域，并在作用域结束时自动清除变量和函数。例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">outer</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">let</span> a = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">const</span> obj = &#123;<br>    <span class="hljs-attr">inner</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);<br>    &#125;,<br>    <span class="hljs-attr">clear</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>      a = <span class="hljs-literal">null</span>;<br>      obj.<span class="hljs-property">inner</span> = <span class="hljs-literal">null</span>;<br>    &#125;<br>  &#125;;<br>  <span class="hljs-keyword">return</span> obj;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="闭包面试常问"><a href="#闭包面试常问" class="headerlink" title="闭包面试常问"></a>闭包面试常问</h3><ol><li>闭包的概念</li><li>什么时候需要使用闭包</li><li>函数柯里化</li><li>React Hooks 的原理</li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Vue2源码解读</title>
    <link href="/2023/07/17/Vue2%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/"/>
    <url>/2023/07/17/Vue2%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/</url>
    
    <content type="html"><![CDATA[<h1 id="Vue-js目录"><a href="#Vue-js目录" class="headerlink" title="Vue.js目录"></a>Vue.js目录</h1><p>src<br>├── compiler        # 编译相关<br>├── core            # 核心代码<br>├── platforms       # 不同平台的支持<br>├── server          # 服务端渲染<br>├── sfc             # .vue 文件解析<br>├── shared          # 共享代码</p><h2 id="compiler"><a href="#compiler" class="headerlink" title="compiler"></a>compiler</h2><p>包含Vue.js所有编译相关的代码，他包括把模版解析成ast语法树，ast语法树优化,代码生成等功能</p><h2 id="core"><a href="#core" class="headerlink" title="core"></a>core</h2><p>包含了vue.js的核心代码，包括内置组件、全局api封装,Vue 实例化、观察者、虚拟 DOM、工具函数等等</p><h2 id="platforms"><a href="#platforms" class="headerlink" title="platforms"></a>platforms</h2><p>代表了不同的宿主环境，Vue.js是一个MVVM的框架,platforms就是入口,他可以跑web，也可以配合weex跑navive客户端</p><h2 id="server"><a href="#server" class="headerlink" title="server"></a>server</h2><p>服务端渲染相关的代码</p><h2 id="sfc"><a href="#sfc" class="headerlink" title="sfc"></a>sfc</h2><p>这个文件下的内容会配合webpack把.vue解析成JS对象</p><h2 id="shared"><a href="#shared" class="headerlink" title="shared"></a>shared</h2><p>Vue.js定义的工具方法</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>模块化</title>
    <link href="/2023/05/28/%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
    <url>/2023/05/28/%E6%A8%A1%E5%9D%97%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h1 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h1><p>模块化编程的<strong>目标</strong>是将<strong>不同作者和来源的代码</strong>模块<strong>组装</strong>成大型程序。</p><p>模块化的作用主要体现在<strong>封装</strong>和<strong>隐私私有实现细节</strong>，保证全局<strong>命名空间上的清洁</strong>。</p><p>模块之间不会<strong>意外修改</strong>各种自定义的<strong>变量</strong>、<strong>函数</strong>、和<strong>类</strong>。</p><h2 id="了解模块模式"><a href="#了解模块模式" class="headerlink" title="了解模块模式"></a>了解模块模式</h2><p>模块是将代码拆分成独立的块，然后再把这些块连接起来。</p><p>这种模块的思想是: <strong>逻辑分块</strong>,<strong>各自封装</strong>,<strong>相互独立</strong>,每个块自选决定暴露什么，同时自选决定引入执行那些外部的代码。</p><p>流行的 JavaScript 模块化规范有 <strong>CommonJS</strong>、<strong>AMD</strong>、<strong>CMD</strong> 及 <strong>ESModule</strong> 模块化规范。</p><h2 id="模块化标准及发展"><a href="#模块化标准及发展" class="headerlink" title="模块化标准及发展"></a>模块化标准及发展</h2><p>1、全局形式的定义，没有模块化的概念，这样很难团队协同和定义。</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-comment">//...</span><br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">bar</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-comment">//...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>通过命名空间的方式，将内容定义在一个对象下，以此实现与外界作用域的隔离。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> util = &#123;<br>        <span class="hljs-attr">foo</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;hello&#x27;</span>); <br>    &#125;<br>&#125;<br>util.foo();<br></code></pre></td></tr></table></figure><p>闭包实现</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs arcade"> <span class="hljs-keyword">var</span> util = (<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-keyword">var</span> person = <span class="hljs-string">&#x27;小明&#x27;</span><br>            <span class="hljs-keyword">var</span> personName = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>                <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(person);<br>            &#125;<br>            <span class="hljs-keyword">return</span> &#123;<br>                <span class="hljs-attr">personName</span>: personName<br>            &#125;<br><br>&#125;)();<br>util.personName();<br></code></pre></td></tr></table></figure><h2 id="CommonJS"><a href="#CommonJS" class="headerlink" title="CommonJS"></a>CommonJS</h2><p>模块化得到实质性推动得力于 nodejs 的发展，最早模块化规范取得不错实践要追溯到2009年，CommonJS 这时还叫 ServerJS，其对应规范定义为 Modules&#x2F;1.0。<a href="https://wiki.commonjs.org/wiki/Modules">https://wiki.commonjs.org/wiki/Modules</a></p><p>require是同步加载的</p><ul><li>运行时加载只有运行时才能得到这个对象(<a href="https://so.csdn.net/so/search?q=module&spm=1001.2101.3001.7020">module</a>.exports的对象)</li><li>对于基本数据类型，属于<strong>复制</strong>。即会被模块缓存。同时，<strong>在另一个模块可以对该模块输出的变量重新赋值</strong>。</li><li>在第一次加载之后会被缓存，引入的是<strong>缓存</strong>中的值</li><li>对于复杂数据类型，属于<strong>浅拷贝</strong>。由于两个模块引用的对象指向同一个内存空间，因此<strong>对该模块的值做修改时会影响另一个模块</strong>。</li></ul><h3 id="使用require-导入其他模块"><a href="#使用require-导入其他模块" class="headerlink" title="使用require()导入其他模块"></a>使用require()导入其他模块</h3><p>如果导入Node内置的系统模块或包管理器安装在系统上的模块，使用模块的非限定名</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//Node内置的模块</span><br><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;fs&quot;</span>);<br><span class="hljs-keyword">const</span> http = = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;http&quot;</span>);<br><span class="hljs-comment">//本地安装的模块</span><br><span class="hljs-keyword">const</span> koa = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;koa&quot;</span>);<br><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;express&quot;</span>)<br><span class="hljs-comment">//导入自己代码中的模块</span><br>通常用./ , ../以表示它们当前的目录或父目录<br><span class="hljs-keyword">const</span> mysql = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./mysql.js&quot;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-number">1.</span>如果模块只导入一个函数或类，只需要调用<span class="hljs-built_in">require</span>()<br><span class="hljs-keyword">const</span> stats = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./stats.js&quot;</span>) <span class="hljs-comment">//导出stats对象，包含所有函数</span><br><br><span class="hljs-number">2.</span>使用解构赋值，向本地导入想要的函数<br><span class="hljs-keyword">const</span> &#123;stddv&#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./stats.js&quot;</span>)<br><br></code></pre></td></tr></table></figure><h3 id="使用module-exports对象导出公共的API"><a href="#使用module-exports对象导出公共的API" class="headerlink" title="使用module.exports对象导出公共的API"></a>使用module.exports对象导出公共的API</h3><p>如果要导出多个值的node模块使用exports对象,只想导出一个函数或类时使用module.exports</p><h2 id="AMD（Async-Module-Definition）"><a href="#AMD（Async-Module-Definition）" class="headerlink" title="AMD（Async Module Definition）"></a>AMD（Async Module Definition）</h2><p>首先明确，这俩规范的代表作分别为：</p><p>AMD —— RequireJS</p><p>CMD —— SeaJS</p><p>还记得我们前面提到，如果模块化导入是同步的，那么我们是不是只有等待内容导入加载完后才可以执行？假设导入是异步的，那么会出现什么情况？</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>CommonJS Syntax<br>const Person = require(<span class="hljs-string">&quot;Person&quot;</span>);<br><br><span class="hljs-keyword">function</span> Programmer ()&#123;<br>    <span class="hljs-regexp">//</span><span class="hljs-keyword">do</span> something<br>&#125;<br><br>Programmer.prototype = new Person();<br><br><span class="hljs-regexp">//</span>如果 require call 是异步的，那么这段代码肯定是无法执行的，因为在执行这句前 Person 模块还未加载<br></code></pre></td></tr></table></figure><h2 id="ES-Module"><a href="#ES-Module" class="headerlink" title="ES Module"></a>ES Module</h2><p>2015 年，这时 babel 开始流行，不得不说，JavaScript 的发展离不开社区的推动。</p><p>Use next generation JavaScript, today.</p><p>我们去 ECMA 考考古吧</p><p>关于 exports，<a href="https://262.ecma-international.org/6.0/#sec-exports">https://262.ecma-international.org/6.0/#sec-exports</a></p><p>关于 imports，<a href="https://262.ecma-international.org/6.0/#sec-imports">https://262.ecma-international.org/6.0/#sec-imports</a></p><h3 id="导出"><a href="#导出" class="headerlink" title="导出"></a>导出</h3><p>要从ES6模块导出常量、变量、函数、类，只需要在声明前加上export关键字即可</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> a1 = <span class="hljs-string">&#x27;aaaa&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">f1</span>(<span class="hljs-params"></span>)&#123;<span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;bbbb&#x27;</span>&#125;;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name, age</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age;<br>    &#125;<br>    <span class="hljs-title function_">sayName</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>);<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>要导出多个，先定义常量，变量，函数和类，不加export关键字，然后再末尾只用一个export关键字导出真正想要导出的值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> a1 = <span class="hljs-string">&#x27;aaaa&#x27;</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">f1</span>(<span class="hljs-params"></span>)&#123;<span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;bbbb&#x27;</span>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name, age</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age;<br>    &#125;<br>    <span class="hljs-title function_">sayName</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">export</span> &#123;a1,f1,<span class="hljs-title class_">Person</span>&#125;;<br></code></pre></td></tr></table></figure><p>export default默认导出</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>&#123;&#125;<br></code></pre></td></tr></table></figure><p>只有一个值的情况下，使用export default可以简化使用导出值的模块代码。</p><p>使用export的常规导出只对有名字的声明有效，而使用export default的默认导出则可以导出任意表达式，包括<strong>匿名函数表达式</strong>和<strong>匿名类表达式</strong>。</p><p>这意味着export default可以导出字面量</p><h3 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h3><p>导入使用import关键字</p><figure class="highlight capnproto"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs capnproto"><span class="hljs-keyword">import</span> a <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./a.js&quot;</span>;<br></code></pre></td></tr></table></figure><p>导出多个值</p><figure class="highlight capnproto"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs capnproto"><span class="hljs-keyword">import</span> &#123;mean, a&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./stats.js&quot;</span>;<br></code></pre></td></tr></table></figure><p>批量导入</p><figure class="highlight capnproto"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs capnproto"><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span>  起的别名  <span class="hljs-keyword">from</span> ‘模块路径&#x27;<br></code></pre></td></tr></table></figure><h2 id="模块打包工具与工程化实践"><a href="#模块打包工具与工程化实践" class="headerlink" title="模块打包工具与工程化实践"></a>模块打包工具与工程化实践</h2><ol><li><strong>Modules&#x2F;1.x</strong>。这个观点觉得 1.x 规范已经够用，只要移植到浏览器端就好。要做的是新增 <a href="http://wiki.commonjs.org/wiki/Modules/Transport">Modules&#x2F;Transport</a> 规范，即在浏览器上运行前，先通过转换工具将模块转换为符合 Transport 规范的代码。主流代表是服务端的开发人员。后来衍生出值得关注的两个实现： <a href="https://github.com/component/component">component</a> 和 <a href="https://github.com/square/es6-module-transpiler">es6 module transpiler</a>。</li><li><strong>Modules&#x2F;Async</strong>。这个观点觉得浏览器有自身的特征，不应该直接用 Modules&#x2F;1.x 规范。这个观点下的典型代表是 <a href="http://wiki.commonjs.org/wiki/Modules/AsynchronousDefinition">AMD</a> 规范及其实现 <a href="http://requirejs.org/">RequireJS</a>。</li><li><strong>Modules&#x2F;2.0</strong>。这个观点觉得浏览器有自身的特征，不应该直接用 Modules&#x2F;1.x 规范，但应该尽可能与 Modules&#x2F;1.x 规范保持一致。这个观点下的典型代表是 <a href="https://code.google.com/p/bravojs/">BravoJS</a> 和 FlyScript 的作者。BravoJS 作者对 CommonJS 的社区的贡献很大，这份 <a href="http://www.page.ca/~wes/CommonJS/modules-2.0-7/">Modules&#x2F;2.0-draft</a> 规范花了很多心思。FlyScript 的作者提出了** <strong><strong>Modules&#x2F;Wrappings</strong></strong> <strong>规范，这规范是</strong> <strong><strong>CMD</strong></strong> **规范的前身。可最终 BravoJS 和 FlyScript 还是走向了衰落。</li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>this的指向</title>
    <link href="/2023/05/28/this%E7%9A%84%E6%8C%87%E5%90%91/"/>
    <url>/2023/05/28/this%E7%9A%84%E6%8C%87%E5%90%91/</url>
    
    <content type="html"><![CDATA[<h1 id="this的指向"><a href="#this的指向" class="headerlink" title="this的指向"></a>this的指向</h1><p>this永远指向一个对象</p><p>this的指向和他调用的环境有关</p><h2 id="全局作用域下this的指向"><a href="#全局作用域下this的指向" class="headerlink" title="全局作用域下this的指向"></a>全局作用域下this的指向</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">全局作用域下 <span class="hljs-keyword">this</span>的指向<br>console.log(<span class="hljs-keyword">this</span>);<span class="hljs-comment">// 指向window</span><br><span class="hljs-comment">//这时打印宿主根对象，在浏览器中是window,在node中是global对象</span><br></code></pre></td></tr></table></figure><h2 id="对象中的this指向"><a href="#对象中的this指向" class="headerlink" title="对象中的this指向"></a>对象中的this指向</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript">关于对象的<span class="hljs-variable language_">this</span>指向<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">f1</span>(<span class="hljs-params"></span>)&#123;<br>       <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>);<br>&#125;<br><span class="hljs-comment">//对象初始化时会绑定this,所以f1的指向是obj</span><br><span class="hljs-keyword">var</span> obj = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;o1&#x27;</span>,<br>  <span class="hljs-attr">f</span>: f1<br>&#125;<br>obj.<span class="hljs-title function_">f1</span>() <span class="hljs-comment">// obj</span><br></code></pre></td></tr></table></figure><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">function</span> <span class="hljs-title function_">f1</span>(<span class="hljs-params"></span>)&#123;<br>       <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(this.name);<br>&#125;<br><span class="hljs-keyword">var</span> obj = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;o1&#x27;</span>,<br>  <span class="hljs-attr">f</span>: f1<br>&#125;<br><span class="hljs-keyword">var</span> name = <span class="hljs-string">&#x27;o2&#x27;</span><br>obj.f1() <span class="hljs-comment">// o1</span><br>f1()<span class="hljs-comment">//o2</span><br><span class="hljs-comment">//这个例子证明了this的指向与调用有关和定义无关</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript">局部<span class="hljs-variable language_">this</span>的指向<br><span class="hljs-keyword">var</span> obj1 = &#123;<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;o3&#x27;</span>,<br>      <span class="hljs-attr">fn</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>); <span class="hljs-comment">// 指向obj</span><br>      <span class="hljs-keyword">function</span> <span class="hljs-title function_">sayName</span>(<span class="hljs-params"></span>)&#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>); <span class="hljs-comment">//指向window</span><br>      &#125;<br>       <span class="hljs-title function_">sayName</span>(); <br>     &#125;<br> &#125;<br>obj1.<span class="hljs-title function_">fn</span>(); <span class="hljs-comment">//对象的函数会发生this的自动绑定，但不代表函数内部的函数会自动绑定this</span><br></code></pre></td></tr></table></figure><h2 id="构造函数中的this指向"><a href="#构造函数中的this指向" class="headerlink" title="构造函数中的this指向"></a>构造函数中的this指向</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//构造函数中的this</span><br><span class="hljs-keyword">var</span> name = <span class="hljs-string">&#x27;a2&#x27;</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span>(<span class="hljs-params">name</span>)&#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">sayName</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>) <span class="hljs-comment">//a1</span><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">f1</span>(<span class="hljs-params"></span>)&#123;<br>       <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>) <span class="hljs-comment">//a2</span><br>    &#125;<br>  &#125;<br>&#125;<br><span class="hljs-keyword">const</span> p1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&#x27;a1&#x27;</span>)<br>p1.<span class="hljs-title function_">sayName</span>()<br></code></pre></td></tr></table></figure><h1 id="this绑定的规则"><a href="#this绑定的规则" class="headerlink" title="this绑定的规则"></a>this绑定的规则</h1><h2 id="默认绑定"><a href="#默认绑定" class="headerlink" title="默认绑定"></a>默认绑定</h2><p>在全局环境（非严格模式）下this指向window,严格模式指向undefined</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> name = <span class="hljs-string">&#x27;a1&#x27;</span>;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">person</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-keyword">return</span> this.name<br>&#125;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(person());<span class="hljs-comment">//a1</span><br></code></pre></td></tr></table></figure><h2 id="隐式绑定"><a href="#隐式绑定" class="headerlink" title="隐式绑定"></a>隐式绑定</h2><p>函数可以作为对象的参数调用，这时的this指向就指向这个上级对象</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function">function <span class="hljs-title">test</span>()</span>&#123;<br>   <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.name<br>&#125;<br><span class="hljs-keyword">let</span> obj = &#123;<br>  name:<span class="hljs-string">&#x27;b1&#x27;</span><br>&#125;;<br>obj.m = test;<br>obj.m() <span class="hljs-comment">//b1</span><br></code></pre></td></tr></table></figure><p>如果嵌套多级对象，this指向还是指向上一级的对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> obj = &#123;<br>         <span class="hljs-attr">c</span>: <span class="hljs-string">&#x27;c1&#x27;</span>,<br>         <span class="hljs-attr">d</span>: &#123;<br>            <span class="hljs-attr">fn</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">c</span>);<br>            &#125;<br>         &#125;<br>&#125;<br>obj.<span class="hljs-property">d</span>.<span class="hljs-title function_">fn</span>(); <span class="hljs-comment">//undefined</span><br></code></pre></td></tr></table></figure><h2 id="显示绑定"><a href="#显示绑定" class="headerlink" title="显示绑定"></a>显示绑定</h2><p>通过 call、apply、bind 改变 this 指向。</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">Function.prototype.myCall = <span class="hljs-keyword">function</span><span class="hljs-params">(context, <span class="hljs-rest_arg">...args</span>)</span> &#123;<br> <span class="hljs-comment">// 如果没有传递上下文，则默认为全局对象</span><br> context = context || window;<br> <span class="hljs-comment">// 用 Symbol 防止属性名冲突</span><br> <span class="hljs-keyword">const</span> fn = Symbol();<br> <span class="hljs-comment">// 将函数作为上下文的属性</span><br> context[fn] = <span class="hljs-keyword">this</span>;<br> <span class="hljs-comment">// 执行函数</span><br> <span class="hljs-keyword">const</span> result = context[fn](...args);<br> <span class="hljs-comment">// 删除函数</span><br> <span class="hljs-keyword">delete</span> context[fn];<br> <span class="hljs-comment">// 返回结果</span><br> <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">myApply</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">context, args</span>) &#123;<br> <span class="hljs-comment">// 如果没有传递上下文，则默认为全局对象</span><br> context = context || <span class="hljs-variable language_">window</span>;<br> <span class="hljs-comment">// 用 Symbol 防止属性名冲突</span><br> <span class="hljs-keyword">const</span> fn = <span class="hljs-title class_">Symbol</span>();<br> <span class="hljs-comment">// 将函数作为上下文的属性</span><br> context[fn] = <span class="hljs-variable language_">this</span>;<br> <span class="hljs-comment">// 执行函数</span><br> <span class="hljs-keyword">const</span> result = context[fn](...args);<br> <span class="hljs-comment">// 删除函数</span><br> <span class="hljs-keyword">delete</span> context[fn];<br> <span class="hljs-comment">// 返回结果</span><br> <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">Function.prototype.myBind = <span class="hljs-keyword">function</span><span class="hljs-params">(context, <span class="hljs-rest_arg">...args1</span>)</span> &#123;<br> <span class="hljs-comment">// 保存当前函数</span><br> <span class="hljs-keyword">const</span> fn = <span class="hljs-keyword">this</span>;<br> <span class="hljs-comment">// 返回一个新的函数</span><br> <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span><span class="hljs-params">(<span class="hljs-rest_arg">...args2</span>)</span> &#123;<br> <span class="hljs-comment">// 如果新函数使用了 new 关键字创建实例，将 this 指向新实例</span><br> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span> <span class="hljs-keyword">instanceof</span> fn) &#123;<br> fn.apply(<span class="hljs-keyword">this</span>, [...args1, ...args2]);<br> &#125; <span class="hljs-keyword">else</span> &#123;<br> <span class="hljs-comment">// 将新函数绑定到指定上下文</span><br> fn.apply(context, [...args1, ...args2]);<br> &#125;<br> &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="new绑定"><a href="#new绑定" class="headerlink" title="new绑定"></a>new绑定</h2><p>通过构造函数关键词new关键字生成一个对象,此时this指向这个对象</p><p>new创建一个对象的过程: </p><p>创建一个空的简单 JavaScript 对象（即 {}）;为步骤 1 新创建的对象添加属性 __proto__，将该属性链接至构造函数的原型对象；将步骤 1 新创建的对象作为 this 的上下文；如果该函数没有返回对象，则返回 this</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">function</span> <span class="hljs-constructor">Person(<span class="hljs-params">name</span>,<span class="hljs-params">age</span>)</span>&#123;<br>  this.name = name;<br>  this.age = age<br>&#125;<br><span class="hljs-keyword">let</span> p1 = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Person(&#x27;<span class="hljs-params">p1</span>&#x27;,18)</span><br></code></pre></td></tr></table></figure><h1 id="箭头函数中的this"><a href="#箭头函数中的this" class="headerlink" title="箭头函数中的this"></a>箭头函数中的this</h1><p>箭头函数中的 this 指向调用该函数的上下文环境（即当前作用域所属的对象）。</p><p>箭头函数不能属于call,apply,bind改变this的指向</p><p>箭头函数的特性:</p><p>1、没有单独的this；2、不绑定arguments；和 new一起用会抛出错误；3、没有prototype属性；4、yield 关键字通常不能在箭头函数中使用，箭头函数不能用作函数生成器</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> obj = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;a1&#x27;</span>,<br>    <span class="hljs-attr">func1</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>), <span class="hljs-number">1000</span>);<br>    &#125;<br>&#125;<br><br>obj.<span class="hljs-title function_">func1</span>(); <span class="hljs-comment">// a1</span><br></code></pre></td></tr></table></figure><h1 id="事件绑定中的this"><a href="#事件绑定中的this" class="headerlink" title="事件绑定中的this"></a>事件绑定中的this</h1><p>函数中的this通常是绑定事件的元素。例如，在下面的代码段中，this 指向 button 元素。</p><figure class="highlight hsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs hsp">&lt;<span class="hljs-keyword">button</span> id=<span class="hljs-string">&quot;btn&quot;</span> <span class="hljs-keyword">onclick</span>=<span class="hljs-string">&quot;console.log(this);&quot;</span>&gt;Click me&lt;/<span class="hljs-keyword">button</span>&gt;<br></code></pre></td></tr></table></figure><h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>vue3组件通信</title>
    <link href="/2023/05/23/vue3%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1/"/>
    <url>/2023/05/23/vue3%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1/</url>
    
    <content type="html"><![CDATA[<h2 id="Vue3的组件通信大致分为3类"><a href="#Vue3的组件通信大致分为3类" class="headerlink" title="Vue3的组件通信大致分为3类"></a>Vue3的组件通信大致分为3类</h2><ul><li>父子组件通信</li><li>兄弟组件通信</li><li>跨级通信</li></ul><p>Vue3父子组件传值</p><p>1、使用props将数据传递给子组件</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">//父组件</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> </span></span><span class="hljs-template-variable">&#123; ref &#125;</span><span class="language-xml"><span class="language-javascript"> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Child</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./Child.vue&#x27;</span> </span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> str = <span class="hljs-title function_">ref</span>(<span class="hljs-string">&#x27;str&#x27;</span>)</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> num = <span class="hljs-title function_">ref</span>(<span class="hljs-number">0</span>)</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">Child</span> <span class="hljs-attr">:msg</span>=<span class="hljs-string">&quot;msg&quot;</span>/&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br></code></pre></td></tr></table></figure><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">//子组件 Child.vue</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-keyword">const</span> props = <span class="hljs-title function_">defineProps</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">msg</span>: <span class="hljs-title class_">String</span>,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-attr">num</span>: <span class="hljs-title class_">Number</span>,</span></span><br><span class="language-javascript"><span class="language-xml">&#125;)</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">props.msg</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">props.num</span>&#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>2.emit触发父组件事件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml">//子组件 Child.vue<br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">const</span> emit = <span class="hljs-title function_">defineEmits</span>([<span class="hljs-string">&quot;click&quot;</span>])</span><br><span class="language-javascript">   <span class="hljs-title function_">handleClick</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">     <span class="hljs-title function_">emit</span>(<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-number">1</span>)</span><br><span class="language-javascript">   &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;handleChange&quot;</span>&gt;</span>按钮<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml">//父组件<br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"> <span class="hljs-keyword">import</span> <span class="hljs-title class_">Child</span> form <span class="hljs-string">&quot;./Child&quot;</span> </span><br><span class="language-javascript"> <span class="hljs-keyword">const</span> <span class="hljs-title function_">click</span> = (<span class="hljs-params">e</span>) =&gt;&#123;</span><br><span class="language-javascript">  <span class="hljs-title function_">alert</span>(e);</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">Child</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;click&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></td></tr></table></figure><p><code>defineProps</code> 和 <code>defineEmits</code> 都是只能在 <script setup> 中使用的编译器宏</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>ref与reactive</title>
    <link href="/2023/05/03/ref%E4%B8%8Ereactive/"/>
    <url>/2023/05/03/ref%E4%B8%8Ereactive/</url>
    
    <content type="html"><![CDATA[<h2 id="组合式-API：setup"><a href="#组合式-API：setup" class="headerlink" title="组合式 API：setup()"></a>组合式 API：setup()</h2><p>vue3的 <code>setup()</code> 函数是组件中的一个新特性，用于替代Vue2中的<code>created()</code>和<code>mounted()</code>生命周期函数，并且提供了更加灵活的响应式数据绑定和逻辑复用。</p><p><code>setup()</code>函数接收两个参数，第一个参数为props对象，第二个参数为上下文对象。在<code>setup()</code>函数内部，可以通过返回一个对象来暴露组件中需要使用的响应式数据、计算属性、方法等。</p><p>在Vue3中，响应式数据的创建方式有所变化，需要使用<code>ref()</code>或<code>reactive()</code>函数进行创建。<code>ref()</code>用于创建基本数据类型的数据，而<code>reactive()</code>用于创建引用数据类型的数据。</p><h3 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h3><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">       <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">num1</span>  &#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">       <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;addClick&quot;</span>&gt;</span>加<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">       <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;num1--&quot;</span>&gt;</span>减<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">setup</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> &#123; ref &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Ref</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> <span class="hljs-attr">num1</span>:<span class="hljs-title class_">Ref</span>&lt;number&gt; = <span class="hljs-title function_">ref</span>(<span class="hljs-number">0</span>)</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">//或 const num1 =  ref&lt;number&gt;(0)</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">const</span> <span class="hljs-title function_">addClick</span> = (<span class="hljs-params"></span>)=&gt;&#123;</span></span><br><span class="language-javascript"><span class="language-xml">    num1.<span class="hljs-property">value</span> += <span class="hljs-number">1</span>;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>1.template中ref会自动浅层解包，无须写.value</p><p>2.在setup中使用要.value</p><h3 id="reactive"><a href="#reactive" class="headerlink" title="reactive"></a>reactive</h3><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs pf"><span class="hljs-variable">&lt;template&gt;</span><br>    <span class="hljs-variable">&lt;div&gt;</span><br>       <span class="hljs-variable">&lt;span&gt;</span>&#123;&#123; <span class="hljs-keyword">state</span>.count &#125;&#125;&lt;/span&gt;<br>    &lt;/div&gt;<br>&lt;/template&gt;<br><br><span class="hljs-variable">&lt;script setup&gt;</span><br>import &#123; reactive &#125; <span class="hljs-keyword">from</span> &#x27;vue&#x27;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">state</span> = reactive(&#123;<br>  count: <span class="hljs-number">0</span>,<br>&#125;);<br><span class="hljs-keyword">const</span> addCount = ()=&gt;&#123;<br>  <span class="hljs-keyword">state</span>.count++<br>&#125;<br><br>&lt;/script&gt;<br><br><span class="hljs-variable">&lt;style scoped&gt;</span><br><br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><p>当需要对一个 “reactive” 对象的某个属性进行赋值操作时，直接对这个属性进行赋值即可。因为这个对象本身就是响应式的，无需使用 “.value” 属性。</p><h3 id="reactive使用注意点"><a href="#reactive使用注意点" class="headerlink" title="reactive使用注意点"></a>reactive使用注意点</h3><ol><li><p>reactive只使用于对象类型，如对象，数组，集合，不适用于原始类型</p></li><li><p>从reactive返回的代理对象与原始对象是不一样的。用<code>===</code>操作符进行比较会返回<code>false</code>，所以必须保持对响应式对象的相同引用，不能解构成局部变量。可以使用toRefs将对象的所有属性转换为响应式的然后再解构才不会失去响应式。</p></li><li><p>不重新赋值reactive对象，重新替换一个响应式对象。新的对象会覆盖，响应式连接会丢失。</p></li><li><p>传递reactive对象中的属性到函数中，响应式连接也会丢失。</p><p>​</p></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
